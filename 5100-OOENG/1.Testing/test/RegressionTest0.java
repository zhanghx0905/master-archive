import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        java.lang.Class<?> wildcardClass7 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        java.lang.Class<?> wildcardClass7 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        java.lang.Class<?> wildcardClass20 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        java.lang.Class<?> wildcardClass20 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        java.lang.Class<?> wildcardClass19 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        java.lang.Class<?> wildcardClass32 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        java.lang.Class<?> wildcardClass37 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        java.lang.Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        int int28 = util0.findKthLargestViaQuickSort(intArray23, 5);
        java.lang.Class<?> wildcardClass29 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        int int69 = util29.removeDuplicateElements(intArray64);
        int int70 = util0.removeDuplicateElements(intArray64);
        java.lang.Class<?> wildcardClass71 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        int int69 = util29.removeDuplicateElements(intArray64);
        int int70 = util0.removeDuplicateElements(intArray64);
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        int int78 = util0.findMinViaIteration(intArray76);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util18.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int int52 = util35.findMinSubArrayLen((int) '#', intArray49);
        util35.getNextPermutationNumber(intArray40);
        int int54 = util18.findMinViaIteration(intArray40);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int86 = util55.threeSumClosest(intArray81, (int) (short) 0);
        util18.getNextPermutationNumber(intArray81);
        int int88 = util0.findMinSubArrayLen((int) (byte) 100, intArray81);
        int[] intArray89 = new int[] {};
        int int91 = util0.findKthLargestViaQuickSort(intArray89, 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, (-1), (short) 10, 10 };
        int int23 = util16.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        int int24 = util8.removeDuplicateElements(intArray21);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util26.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        int int62 = util26.findMinViaIteration(intArray48);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, 1, (short) 1 };
        int int90 = util84.findMinSubArrayLen((-1), intArray89);
        int int91 = util83.removeDuplicateElements(intArray89);
        util64.getNextPermutationNumber(intArray89);
        int int94 = util63.threeSumClosest(intArray89, (int) (short) 0);
        util26.getNextPermutationNumber(intArray89);
        int int96 = util8.findMinSubArrayLen((int) (byte) 100, intArray89);
        util0.getNextPermutationNumber(intArray89);
        int int99 = util0.findKthLargestViaQuickSort(intArray48, (int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util32.findMinSubArrayLen((int) '#', intArray46);
        util32.getNextPermutationNumber(intArray37);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util51.findMinSubArrayLen((int) '#', intArray65);
        util51.getNextPermutationNumber(intArray56);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util51.findKthLargestViaQuickSort(intArray75, (int) ' ');
        int int81 = util32.findKthLargestViaQuickSort(intArray75, (int) '4');
        int int83 = util0.findKthLargestViaQuickSort(intArray75, (int) 'a');
        java.lang.Class<?> wildcardClass84 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        util39.getNextPermutationNumber(intArray64);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        int int87 = util68.findKthLargestViaQuickSort(intArray83, (int) '#');
        int int89 = util39.threeSumClosest(intArray83, (int) (short) 100);
        int int91 = util0.findKthLargestViaQuickSort(intArray83, (int) ' ');
        java.lang.Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        java.lang.Class<?> wildcardClass20 = intArray15.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        java.lang.Class<?> wildcardClass52 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        int int69 = util29.removeDuplicateElements(intArray64);
        int int70 = util0.removeDuplicateElements(intArray64);
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, 1, (short) 1 };
        int int79 = util73.findMinSubArrayLen((-1), intArray78);
        int int80 = util72.removeDuplicateElements(intArray78);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, 1, (short) 1 };
        int int89 = util83.findMinSubArrayLen((-1), intArray88);
        util82.getNextPermutationNumber(intArray88);
        int int91 = util72.findMinSubArrayLen(3, intArray88);
        int int92 = util0.findMinSubArrayLen((-1), intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util58.findMinSubArrayLen((int) '#', intArray72);
        util58.getNextPermutationNumber(intArray63);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.findKthLargestViaQuickSort(intArray82, (int) ' ');
        int int88 = util39.findKthLargestViaQuickSort(intArray82, (int) '4');
        int int89 = util0.findMinSubArrayLen(int19, intArray82);
        Util util90 = new Util();
        Util util91 = new Util();
        int[] intArray96 = new int[] { 1, 1, (short) 1 };
        int int97 = util91.findMinSubArrayLen((-1), intArray96);
        int int98 = util90.removeDuplicateElements(intArray96);
        int int99 = util0.removeDuplicateElements(intArray96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 3 + "'", int99 == 3);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util57.getNextPermutationNumber(intArray63);
        int int67 = util48.findKthLargestViaQuickSort(intArray63, (int) '#');
        int int69 = util19.threeSumClosest(intArray63, (int) (short) 100);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        int int86 = util78.removeDuplicateElements(intArray84);
        int int88 = util70.findKthLargestViaQuickSort(intArray84, (int) (byte) -1);
        int[] intArray96 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int97 = util70.findMinSubArrayLen(10, intArray96);
        int int98 = util19.removeDuplicateElements(intArray96);
        int int99 = util0.findMinViaIteration(intArray96);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        java.lang.Class<?> wildcardClass28 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        java.lang.Class<?> wildcardClass38 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        java.lang.Class<?> wildcardClass10 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        java.lang.Class<?> wildcardClass56 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util51.getNextPermutationNumber(intArray57);
        int int60 = util41.findMinSubArrayLen(3, intArray57);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        int int81 = util62.findKthLargestViaQuickSort(intArray77, (int) '#');
        int int82 = util41.findMinSubArrayLen((int) '#', intArray77);
        int int83 = util0.removeDuplicateElements(intArray77);
        java.lang.Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen((int) '4', intArray53);
        java.lang.Class<?> wildcardClass55 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util51.getNextPermutationNumber(intArray57);
        int int60 = util41.findMinSubArrayLen(3, intArray57);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        int int81 = util62.findKthLargestViaQuickSort(intArray77, (int) '#');
        int int82 = util41.findMinSubArrayLen((int) '#', intArray77);
        int int83 = util0.removeDuplicateElements(intArray77);
        java.lang.Class<?> wildcardClass84 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        java.lang.Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util9.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util26.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        int int62 = util26.findMinViaIteration(intArray48);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, 1, (short) 1 };
        int int90 = util84.findMinSubArrayLen((-1), intArray89);
        int int91 = util83.removeDuplicateElements(intArray89);
        util64.getNextPermutationNumber(intArray89);
        int int94 = util63.threeSumClosest(intArray89, (int) (short) 0);
        util26.getNextPermutationNumber(intArray89);
        int int96 = util9.findMinViaIteration(intArray89);
        util0.getNextPermutationNumber(intArray89);
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        java.lang.Class<?> wildcardClass8 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        int int69 = util29.removeDuplicateElements(intArray64);
        int int70 = util0.removeDuplicateElements(intArray64);
        java.lang.Class<?> wildcardClass71 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util18.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int int52 = util35.findMinSubArrayLen((int) '#', intArray49);
        util35.getNextPermutationNumber(intArray40);
        int int54 = util18.findMinViaIteration(intArray40);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int86 = util55.threeSumClosest(intArray81, (int) (short) 0);
        util18.getNextPermutationNumber(intArray81);
        int int88 = util0.findMinSubArrayLen((int) (byte) 100, intArray81);
        java.lang.Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray80);
        Util util89 = new Util();
        int[] intArray94 = new int[] { 1, (-1), (short) 10, 10 };
        int int96 = util89.findKthLargestViaQuickSort(intArray94, (int) (byte) 1);
        int int97 = util0.removeDuplicateElements(intArray94);
        int int99 = util0.findKthLargestViaQuickSort(intArray22, (-1));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray36);
        java.lang.Class<?> wildcardClass47 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, 1, (short) 1 };
        int int41 = util35.findMinSubArrayLen((-1), intArray40);
        int int42 = util34.removeDuplicateElements(intArray40);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, 1, (short) 1 };
        int int51 = util45.findMinSubArrayLen((-1), intArray50);
        util44.getNextPermutationNumber(intArray50);
        int int53 = util34.findMinSubArrayLen(3, intArray50);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int70 = util54.removeDuplicateElements(intArray67);
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, (-1), (short) 10, 10 };
        int int78 = util71.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, (-1), (short) 10, 10 };
        int int87 = util80.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int88 = util71.findMinSubArrayLen((int) '#', intArray85);
        util71.getNextPermutationNumber(intArray76);
        int int90 = util54.findMinViaIteration(intArray76);
        int int92 = util34.findKthLargestViaQuickSort(intArray76, (int) '4');
        util17.getNextPermutationNumber(intArray76);
        int int94 = util9.removeDuplicateElements(intArray76);
        int int95 = util0.findMinSubArrayLen(3, intArray76);
        java.lang.Class<?> wildcardClass96 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        java.lang.Class<?> wildcardClass42 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        java.lang.Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util27.findMinSubArrayLen((int) '#', intArray41);
        util27.getNextPermutationNumber(intArray32);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util27.findKthLargestViaQuickSort(intArray51, (int) ' ');
        int int57 = util8.findKthLargestViaQuickSort(intArray51, (int) (short) -1);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util58.findMinSubArrayLen((int) (byte) -1, intArray73);
        int int77 = util8.removeDuplicateElements(intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util46.threeSumClosest(intArray70, int72);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int91 = util46.findKthLargestViaQuickSort(intArray87, int81);
        int int92 = util0.removeDuplicateElements(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        java.lang.Class<?> wildcardClass68 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int48 = util29.findMinSubArrayLen(3, intArray45);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util49.removeDuplicateElements(intArray62);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util66.findMinSubArrayLen((int) '#', intArray80);
        util66.getNextPermutationNumber(intArray71);
        int int85 = util49.findMinViaIteration(intArray71);
        int int87 = util29.findKthLargestViaQuickSort(intArray71, (int) '4');
        int int88 = util21.removeDuplicateElements(intArray71);
        int int89 = util0.findMinViaIteration(intArray71);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        int int69 = util0.threeSumClosest(intArray59, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util58.findMinSubArrayLen((int) '#', intArray72);
        util58.getNextPermutationNumber(intArray63);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.findKthLargestViaQuickSort(intArray82, (int) ' ');
        int int88 = util39.findKthLargestViaQuickSort(intArray82, (int) '4');
        int int89 = util0.findMinSubArrayLen(int19, intArray82);
        java.lang.Class<?> wildcardClass90 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        util29.getNextPermutationNumber(intArray54);
        int int59 = util28.threeSumClosest(intArray54, (int) (short) 0);
        int int61 = util0.threeSumClosest(intArray54, 100);
        int int63 = util0.threeSumClosest(intArray54, 4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        java.lang.Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        util65.getNextPermutationNumber(intArray70);
        int[] intArray73 = null;
        int int74 = util65.removeDuplicateElements(intArray73);
        int int76 = util65.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        int int77 = util0.findMinSubArrayLen(7, intArray70);
        java.lang.Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        java.lang.Class<?> wildcardClass53 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        int int11 = util0.findKthLargestViaQuickSort(intArray5, (int) (short) 1);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util9.removeDuplicateElements(intArray22);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util27.removeDuplicateElements(intArray40);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        int int63 = util27.findMinViaIteration(intArray49);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util65.findMinSubArrayLen((int) '#', intArray79);
        util65.getNextPermutationNumber(intArray70);
        Util util84 = new Util();
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, 1, (short) 1 };
        int int91 = util85.findMinSubArrayLen((-1), intArray90);
        int int92 = util84.removeDuplicateElements(intArray90);
        util65.getNextPermutationNumber(intArray90);
        int int95 = util64.threeSumClosest(intArray90, (int) (short) 0);
        util27.getNextPermutationNumber(intArray90);
        int int97 = util9.findMinSubArrayLen((int) (byte) 100, intArray90);
        int int99 = util0.threeSumClosest(intArray90, 5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        java.lang.Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        int int40 = util0.removeDuplicateElements(intArray35);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        util41.getNextPermutationNumber(intArray66);
        util0.getNextPermutationNumber(intArray66);
        int int72 = util0.threeSumClosest(intArray15, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        java.lang.Class<?> wildcardClass9 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, 1, (short) 1 };
        int int40 = util34.findMinSubArrayLen((-1), intArray39);
        int int41 = util33.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, 1, (short) 1 };
        int int50 = util44.findMinSubArrayLen((-1), intArray49);
        util43.getNextPermutationNumber(intArray49);
        int int52 = util33.findMinSubArrayLen(3, intArray49);
        int int53 = util0.findMinSubArrayLen((-1), intArray49);
        java.lang.Class<?> wildcardClass54 = intArray49.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util33.removeDuplicateElements(intArray46);
        int int50 = util0.findMinSubArrayLen(1, intArray46);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int60 = util51.findMinViaIteration(intArray57);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        int int79 = util61.findKthLargestViaQuickSort(intArray75, (int) (byte) -1);
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, (-1), (short) 10, 10 };
        int int87 = util80.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int89 = util61.threeSumClosest(intArray85, 3);
        util51.getNextPermutationNumber(intArray85);
        int int91 = util0.findMinViaIteration(intArray85);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        java.lang.Class<?> wildcardClass38 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util29.getNextPermutationNumber(intArray34);
        int int37 = util0.removeDuplicateElements(intArray34);
        java.lang.Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int int29 = util0.findMinViaIteration(intArray5);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util30.findMinSubArrayLen((int) '#', intArray44);
        util30.getNextPermutationNumber(intArray35);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util30.threeSumClosest(intArray54, int56);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int93 = util77.removeDuplicateElements(intArray90);
        int int95 = util58.threeSumClosest(intArray90, 1);
        util30.getNextPermutationNumber(intArray90);
        int int97 = util0.findMinSubArrayLen(int28, intArray90);
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int49 = util30.findKthLargestViaQuickSort(intArray45, (int) '#');
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        util50.getNextPermutationNumber(intArray56);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int69 = util50.findKthLargestViaQuickSort(intArray65, (int) '#');
        int int70 = util30.removeDuplicateElements(intArray65);
        int int72 = util29.threeSumClosest(intArray65, (int) '#');
        int int73 = util0.removeDuplicateElements(intArray65);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        int int84 = util75.findMinViaIteration(intArray81);
        int int85 = util46.removeDuplicateElements(intArray81);
        int int87 = util0.findKthLargestViaQuickSort(intArray81, (int) (short) 100);
        util0.getNextPermutationNumber(intArray13);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        int int87 = util0.findKthLargestViaQuickSort(intArray83, (int) '4');
        java.lang.Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int int29 = util0.findMinViaIteration(intArray5);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util30.findMinSubArrayLen((int) '#', intArray44);
        util30.getNextPermutationNumber(intArray35);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util30.threeSumClosest(intArray54, int56);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int93 = util77.removeDuplicateElements(intArray90);
        int int95 = util58.threeSumClosest(intArray90, 1);
        util30.getNextPermutationNumber(intArray90);
        int int97 = util0.findMinSubArrayLen(int28, intArray90);
        java.lang.Class<?> wildcardClass98 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util57.removeDuplicateElements(intArray70);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, (-1), (short) 10, 10 };
        int int90 = util83.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int91 = util74.findMinSubArrayLen((int) '#', intArray88);
        util74.getNextPermutationNumber(intArray79);
        int int93 = util57.findMinViaIteration(intArray79);
        int int95 = util37.findKthLargestViaQuickSort(intArray79, (int) '4');
        util20.getNextPermutationNumber(intArray79);
        int int97 = util0.removeDuplicateElements(intArray79);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        java.lang.Class<?> wildcardClass51 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        int[] intArray44 = new int[] { 0 };
        int int45 = util0.removeDuplicateElements(intArray44);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        util56.getNextPermutationNumber(intArray62);
        int int65 = util46.findMinSubArrayLen(3, intArray62);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        util67.getNextPermutationNumber(intArray73);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        util76.getNextPermutationNumber(intArray82);
        int int86 = util67.findKthLargestViaQuickSort(intArray82, (int) '#');
        int int87 = util46.findMinSubArrayLen((int) '#', intArray82);
        util0.getNextPermutationNumber(intArray82);
        Util util90 = new Util();
        int[] intArray95 = new int[] { 1, 1, (short) 1 };
        int int96 = util90.findMinSubArrayLen((-1), intArray95);
        util90.getNextPermutationNumber(intArray95);
        int int98 = util0.findMinSubArrayLen((-1), intArray95);
        java.lang.Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int53 = util37.removeDuplicateElements(intArray50);
        int int55 = util18.threeSumClosest(intArray50, 1);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        util66.getNextPermutationNumber(intArray72);
        int int75 = util56.findMinSubArrayLen(3, intArray72);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        Util util86 = new Util();
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        util86.getNextPermutationNumber(intArray92);
        int int96 = util77.findKthLargestViaQuickSort(intArray92, (int) '#');
        int int97 = util56.findMinSubArrayLen((int) '#', intArray92);
        util18.getNextPermutationNumber(intArray92);
        util0.getNextPermutationNumber(intArray92);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        util57.getNextPermutationNumber(intArray82);
        Util util86 = new Util();
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        int int94 = util86.removeDuplicateElements(intArray92);
        int int95 = util86.findMinViaIteration(intArray92);
        int int96 = util57.removeDuplicateElements(intArray92);
        int int97 = util0.removeDuplicateElements(intArray92);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util10.removeDuplicateElements(intArray23);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util27.removeDuplicateElements(intArray40);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        int int63 = util27.findMinViaIteration(intArray49);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util65.findMinSubArrayLen((int) '#', intArray79);
        util65.getNextPermutationNumber(intArray70);
        Util util84 = new Util();
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, 1, (short) 1 };
        int int91 = util85.findMinSubArrayLen((-1), intArray90);
        int int92 = util84.removeDuplicateElements(intArray90);
        util65.getNextPermutationNumber(intArray90);
        int int95 = util64.threeSumClosest(intArray90, (int) (short) 0);
        util27.getNextPermutationNumber(intArray90);
        int int97 = util10.findMinViaIteration(intArray90);
        int int98 = util10.removeDuplicateElements(intArray40);
        int int99 = util0.findMinViaIteration(intArray40);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        java.lang.Class<?> wildcardClass51 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util10.removeDuplicateElements(intArray23);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util27.removeDuplicateElements(intArray40);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        int int63 = util27.findMinViaIteration(intArray49);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util65.findMinSubArrayLen((int) '#', intArray79);
        util65.getNextPermutationNumber(intArray70);
        Util util84 = new Util();
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, 1, (short) 1 };
        int int91 = util85.findMinSubArrayLen((-1), intArray90);
        int int92 = util84.removeDuplicateElements(intArray90);
        util65.getNextPermutationNumber(intArray90);
        int int95 = util64.threeSumClosest(intArray90, (int) (short) 0);
        util27.getNextPermutationNumber(intArray90);
        int int97 = util10.findMinViaIteration(intArray90);
        int int98 = util10.removeDuplicateElements(intArray90);
        int int99 = util0.findMinSubArrayLen((int) 'a', intArray90);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        java.lang.Class<?> wildcardClass36 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray30);
        int[] intArray89 = null;
        int int90 = util0.removeDuplicateElements(intArray89);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util47.findMinSubArrayLen((int) '#', intArray61);
        util47.getNextPermutationNumber(intArray52);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        util47.getNextPermutationNumber(intArray72);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        util76.getNextPermutationNumber(intArray82);
        Util util85 = new Util();
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, 1, (short) 1 };
        int int92 = util86.findMinSubArrayLen((-1), intArray91);
        util85.getNextPermutationNumber(intArray91);
        int int95 = util76.findKthLargestViaQuickSort(intArray91, (int) '#');
        int int97 = util47.threeSumClosest(intArray91, (int) (short) 100);
        int int98 = util29.findMinViaIteration(intArray91);
        util0.getNextPermutationNumber(intArray91);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int[] intArray29 = null;
        int int30 = util0.findKthLargestViaQuickSort(intArray29, int26);
        java.lang.Class<?> wildcardClass31 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int58 = util0.findKthLargestViaQuickSort(intArray42, (int) '4');
        java.lang.Class<?> wildcardClass59 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        java.lang.Class<?> wildcardClass29 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int58 = util0.findKthLargestViaQuickSort(intArray42, (int) '4');
        int[] intArray59 = null;
        int int60 = util0.removeDuplicateElements(intArray59);
        java.lang.Class<?> wildcardClass61 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        util31.getNextPermutationNumber(intArray36);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        util31.getNextPermutationNumber(intArray56);
        int int61 = util30.threeSumClosest(intArray56, (int) (short) 0);
        int int62 = util0.findMinSubArrayLen((int) 'a', intArray56);
        int[] intArray66 = new int[] { (short) -1, (byte) 1, (byte) -1 };
        int int67 = util0.removeDuplicateElements(intArray66);
        java.lang.Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util33.threeSumClosest(intArray57, 3);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int70 = util33.findKthLargestViaQuickSort(intArray67, 3);
        int int71 = util0.findMinSubArrayLen((int) 'a', intArray67);
        java.lang.Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util47.findKthLargestViaQuickSort(intArray70, 5);
        int int77 = util0.findKthLargestViaQuickSort(intArray70, (-1));
        java.lang.Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int55 = util46.findMinViaIteration(intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        int int72 = util64.removeDuplicateElements(intArray70);
        int int74 = util56.findKthLargestViaQuickSort(intArray70, (int) (byte) -1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int84 = util56.threeSumClosest(intArray80, 3);
        util46.getNextPermutationNumber(intArray80);
        util0.getNextPermutationNumber(intArray80);
        java.lang.Class<?> wildcardClass87 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        util0.getNextPermutationNumber(intArray14);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util25.findMinSubArrayLen((int) '#', intArray39);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        util44.getNextPermutationNumber(intArray69);
        int int74 = util43.threeSumClosest(intArray69, (int) (short) 0);
        int int75 = util25.removeDuplicateElements(intArray69);
        int int76 = util0.findMinViaIteration(intArray69);
        java.lang.Class<?> wildcardClass77 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int80 = util0.findMinSubArrayLen(6, intArray51);
        java.lang.Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int[] intArray29 = null;
        int int30 = util0.findKthLargestViaQuickSort(intArray29, int26);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util50.getNextPermutationNumber(intArray75);
        int int80 = util49.threeSumClosest(intArray75, (int) (short) 0);
        int int81 = util31.removeDuplicateElements(intArray75);
        util0.getNextPermutationNumber(intArray75);
        util0.getNextPermutationNumber(intArray64);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        util0.getNextPermutationNumber(intArray5);
        java.lang.Class<?> wildcardClass48 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int[] intArray8 = null;
        int int9 = util0.findMinViaIteration(intArray8);
        java.lang.Class<?> wildcardClass10 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray30);
        java.lang.Class<?> wildcardClass89 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util29.getNextPermutationNumber(intArray34);
        int int37 = util0.removeDuplicateElements(intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int55 = util0.removeDuplicateElements(intArray51);
        java.lang.Class<?> wildcardClass56 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        int int68 = util0.findMinViaIteration(intArray41);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, 1, (short) 1 };
        int int40 = util34.findMinSubArrayLen((-1), intArray39);
        int int41 = util33.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, 1, (short) 1 };
        int int50 = util44.findMinSubArrayLen((-1), intArray49);
        util43.getNextPermutationNumber(intArray49);
        int int52 = util33.findMinSubArrayLen(3, intArray49);
        int int53 = util0.findMinSubArrayLen((-1), intArray49);
        java.lang.Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util38.findMinSubArrayLen((int) '#', intArray52);
        util38.getNextPermutationNumber(intArray43);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        util38.getNextPermutationNumber(intArray63);
        int int68 = util37.threeSumClosest(intArray63, (int) (short) 0);
        util0.getNextPermutationNumber(intArray63);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, (-1), (short) 10, 10 };
        int int86 = util79.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util70.findMinSubArrayLen((int) '#', intArray84);
        util70.getNextPermutationNumber(intArray75);
        util0.getNextPermutationNumber(intArray75);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int int9 = util0.findMinSubArrayLen(10, intArray5);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util18.threeSumClosest(intArray42, 3);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util18.findKthLargestViaQuickSort(intArray52, 3);
        int int56 = util10.findMinViaIteration(intArray52);
        util10.getNextPermutationNumber(intArray15);
        int int58 = util0.removeDuplicateElements(intArray15);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util59.findMinSubArrayLen(10, intArray64);
        Util util69 = new Util();
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        int int78 = util70.removeDuplicateElements(intArray76);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        util80.getNextPermutationNumber(intArray86);
        int int89 = util70.findMinSubArrayLen(3, intArray86);
        int int90 = util69.findMinViaIteration(intArray86);
        util59.getNextPermutationNumber(intArray86);
        int int93 = util0.threeSumClosest(intArray86, (int) 'a');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int int29 = util0.findMinViaIteration(intArray5);
        java.lang.Class<?> wildcardClass30 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        java.lang.Class<?> wildcardClass29 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        java.lang.Class<?> wildcardClass44 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        int int78 = util60.findKthLargestViaQuickSort(intArray74, (int) (byte) -1);
        int[] intArray86 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int87 = util60.findMinSubArrayLen(10, intArray86);
        int int88 = util0.findMinSubArrayLen((-1), intArray86);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util40.removeDuplicateElements(intArray53);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        int int76 = util40.findMinViaIteration(intArray62);
        int int77 = util20.findMinSubArrayLen(0, intArray62);
        util0.getNextPermutationNumber(intArray62);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        int int52 = util0.findKthLargestViaQuickSort(intArray14, 6);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        util63.getNextPermutationNumber(intArray69);
        int int72 = util53.findMinSubArrayLen(3, intArray69);
        int int73 = util0.removeDuplicateElements(intArray69);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util27.findMinSubArrayLen((int) '#', intArray41);
        util27.getNextPermutationNumber(intArray32);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util27.findKthLargestViaQuickSort(intArray51, (int) ' ');
        int int57 = util8.findKthLargestViaQuickSort(intArray51, (int) (short) -1);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util58.findMinSubArrayLen((int) (byte) -1, intArray73);
        int int77 = util8.removeDuplicateElements(intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        int[] intArray80 = null;
        int int81 = util0.findMinSubArrayLen((int) 'a', intArray80);
        int[] intArray82 = null;
        int int84 = util0.findKthLargestViaQuickSort(intArray82, 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        java.lang.Class<?> wildcardClass28 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util27.findMinSubArrayLen((int) '#', intArray41);
        util27.getNextPermutationNumber(intArray32);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util27.findKthLargestViaQuickSort(intArray51, (int) ' ');
        int int57 = util8.findKthLargestViaQuickSort(intArray51, (int) (short) -1);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util58.findMinSubArrayLen((int) (byte) -1, intArray73);
        int int77 = util8.removeDuplicateElements(intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        int int88 = util80.removeDuplicateElements(intArray86);
        int int89 = util80.findMinViaIteration(intArray86);
        int int90 = util0.findMinSubArrayLen((int) '#', intArray86);
        java.lang.Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int69 = util0.findKthLargestViaQuickSort(intArray65, 0);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        int int86 = util78.removeDuplicateElements(intArray84);
        int int88 = util70.findKthLargestViaQuickSort(intArray84, (int) (byte) -1);
        int int89 = util70.removeDuplicateElements(intArray84);
        int int90 = util0.removeDuplicateElements(intArray84);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        int int48 = util40.removeDuplicateElements(intArray46);
        int int50 = util32.findKthLargestViaQuickSort(intArray46, (int) (byte) -1);
        int[] intArray58 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int59 = util32.findMinSubArrayLen(10, intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util61.findMinSubArrayLen((int) '#', intArray75);
        util61.getNextPermutationNumber(intArray66);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        int int88 = util80.removeDuplicateElements(intArray86);
        util61.getNextPermutationNumber(intArray86);
        int int91 = util60.threeSumClosest(intArray86, (int) (short) 0);
        int int93 = util32.threeSumClosest(intArray86, 100);
        util0.getNextPermutationNumber(intArray86);
        java.lang.Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util38.findMinSubArrayLen((int) '#', intArray52);
        util38.getNextPermutationNumber(intArray43);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        util38.getNextPermutationNumber(intArray63);
        int int68 = util37.threeSumClosest(intArray63, (int) (short) 0);
        util0.getNextPermutationNumber(intArray63);
        java.lang.Class<?> wildcardClass70 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        util0.getNextPermutationNumber(intArray5);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        int int66 = util48.findKthLargestViaQuickSort(intArray62, (int) (byte) -1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util48.threeSumClosest(intArray72, 3);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        util77.getNextPermutationNumber(intArray82);
        int int85 = util48.removeDuplicateElements(intArray82);
        util0.getNextPermutationNumber(intArray82);
        util0.getNextPermutationNumber(intArray42);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        int int40 = util20.findMinSubArrayLen(0, intArray34);
        util0.getNextPermutationNumber(intArray34);
        java.lang.Class<?> wildcardClass42 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        java.lang.Class<?> wildcardClass40 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int75 = util37.removeDuplicateElements(intArray71);
        int int76 = util0.findMinViaIteration(intArray71);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        int int21 = util0.findKthLargestViaQuickSort(intArray6, 1);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util22.getNextPermutationNumber(intArray27);
        int[] intArray30 = null;
        int int31 = util22.removeDuplicateElements(intArray30);
        int int33 = util22.findKthLargestViaQuickSort(intArray27, (int) (short) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, (-1), (short) 10, 10 };
        int int49 = util42.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int59 = util42.findMinSubArrayLen((int) '#', intArray56);
        util42.getNextPermutationNumber(intArray47);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util42.findKthLargestViaQuickSort(intArray66, (int) ' ');
        int int71 = util42.findMinViaIteration(intArray47);
        util34.getNextPermutationNumber(intArray47);
        int int73 = util22.findMinViaIteration(intArray47);
        int int75 = util0.findKthLargestViaQuickSort(intArray47, (int) '#');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, (-1), (short) 10, 10 };
        int int18 = util11.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int int28 = util11.findMinSubArrayLen((int) '#', intArray25);
        util11.getNextPermutationNumber(intArray16);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        util11.getNextPermutationNumber(intArray36);
        int int41 = util10.threeSumClosest(intArray36, (int) (short) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int80 = util43.findKthLargestViaQuickSort(intArray77, 3);
        int int81 = util10.findMinSubArrayLen((int) 'a', intArray77);
        int int83 = util10.findMinSubArrayLen(7, intArray57);
        int int85 = util0.findKthLargestViaQuickSort(intArray57, 0);
        java.lang.Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int57 = util0.findMinSubArrayLen(0, intArray42);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util58.findMinSubArrayLen(10, intArray63);
        Util util68 = new Util();
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        util79.getNextPermutationNumber(intArray85);
        int int88 = util69.findMinSubArrayLen(3, intArray85);
        int int89 = util68.findMinViaIteration(intArray85);
        util58.getNextPermutationNumber(intArray85);
        int int91 = util0.removeDuplicateElements(intArray85);
        java.lang.Class<?> wildcardClass92 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util46.threeSumClosest(intArray70, int72);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int91 = util46.findKthLargestViaQuickSort(intArray87, int81);
        int int92 = util0.removeDuplicateElements(intArray87);
        int[] intArray93 = null;
        int int94 = util0.findMinViaIteration(intArray93);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int[] intArray77 = null;
        int int78 = util0.findMinViaIteration(intArray77);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int80 = util0.findMinSubArrayLen(6, intArray51);
        Util util81 = new Util();
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, 1, (short) 1 };
        int int88 = util82.findMinSubArrayLen((-1), intArray87);
        util81.getNextPermutationNumber(intArray87);
        util0.getNextPermutationNumber(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        util20.getNextPermutationNumber(intArray45);
        int int49 = util0.findMinSubArrayLen((int) ' ', intArray45);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util50.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util73 = new Util();
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, 1, (short) 1 };
        int int80 = util74.findMinSubArrayLen((-1), intArray79);
        int int81 = util73.removeDuplicateElements(intArray79);
        int int83 = util65.findKthLargestViaQuickSort(intArray79, (int) (byte) -1);
        int[] intArray91 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int92 = util65.findMinSubArrayLen(10, intArray91);
        int int93 = util58.removeDuplicateElements(intArray91);
        int int95 = util50.threeSumClosest(intArray91, (int) 'a');
        int int97 = util50.findMinSubArrayLen((int) (byte) 1, intArray79);
        int int99 = util0.threeSumClosest(intArray79, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 7 + "'", int93 == 7);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        util0.getNextPermutationNumber(intArray34);
        java.lang.Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        java.lang.Class<?> wildcardClass46 = intArray41.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        int int58 = util40.findKthLargestViaQuickSort(intArray54, (int) (byte) -1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util40.threeSumClosest(intArray64, 3);
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int77 = util40.findKthLargestViaQuickSort(intArray74, 3);
        int int78 = util32.findMinViaIteration(intArray74);
        int int79 = util0.findKthLargestViaQuickSort(intArray74, int47);
        java.lang.Class<?> wildcardClass80 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        int int68 = util0.removeDuplicateElements(intArray24);
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, (-1), (short) 10, 10 };
        int int76 = util69.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util69.findMinSubArrayLen((int) '#', intArray83);
        int int87 = util0.findKthLargestViaQuickSort(intArray83, int66);
        java.lang.Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util8.findMinSubArrayLen((int) '#', intArray22);
        util8.getNextPermutationNumber(intArray13);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.findKthLargestViaQuickSort(intArray32, (int) ' ');
        int int37 = util8.findMinViaIteration(intArray13);
        util0.getNextPermutationNumber(intArray13);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util39.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        int int72 = util54.findKthLargestViaQuickSort(intArray68, (int) (byte) -1);
        int[] intArray80 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int81 = util54.findMinSubArrayLen(10, intArray80);
        int int82 = util47.removeDuplicateElements(intArray80);
        int int84 = util39.threeSumClosest(intArray80, (int) 'a');
        int int86 = util39.findMinSubArrayLen((int) (byte) 1, intArray68);
        util0.getNextPermutationNumber(intArray68);
        int[] intArray88 = null;
        int int89 = util0.removeDuplicateElements(intArray88);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        int[] intArray44 = new int[] { 0 };
        int int45 = util0.removeDuplicateElements(intArray44);
        java.lang.Class<?> wildcardClass46 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, 1, (short) 1 };
        int int34 = util28.findMinSubArrayLen((-1), intArray33);
        int int35 = util27.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int46 = util27.findMinSubArrayLen(3, intArray43);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util47.removeDuplicateElements(intArray60);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        int int83 = util47.findMinViaIteration(intArray69);
        int int85 = util27.findKthLargestViaQuickSort(intArray69, (int) '4');
        int int86 = util19.removeDuplicateElements(intArray69);
        int int87 = util0.removeDuplicateElements(intArray69);
        java.lang.Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.threeSumClosest(intArray82, 3);
        int int87 = util0.threeSumClosest(intArray82, int86);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        int int47 = util0.findMinSubArrayLen((int) (byte) 1, intArray29);
        java.lang.Class<?> wildcardClass48 = intArray29.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util18.threeSumClosest(intArray42, 3);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util18.findKthLargestViaQuickSort(intArray52, 3);
        util0.getNextPermutationNumber(intArray52);
        int[] intArray60 = new int[] { (short) 100, (byte) 1, (byte) 100 };
        int int62 = util0.threeSumClosest(intArray60, 4);
        java.lang.Class<?> wildcardClass63 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        int int21 = util0.findKthLargestViaQuickSort(intArray6, 1);
        java.lang.Class<?> wildcardClass22 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        int int68 = util0.removeDuplicateElements(intArray24);
        java.lang.Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        int int28 = util19.findMinViaIteration(intArray25);
        int int30 = util0.threeSumClosest(intArray25, (int) (byte) 0);
        int int32 = util0.findKthLargestViaQuickSort(intArray5, 1);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        int[] intArray55 = new int[] { 5, 4, 'a' };
        int int56 = util33.removeDuplicateElements(intArray55);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.threeSumClosest(intArray82, 3);
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        int int95 = util58.threeSumClosest(intArray92, 10);
        int int96 = util33.findMinSubArrayLen(6, intArray92);
        util33.getNextPermutationNumber(intArray47);
        int int99 = util0.findKthLargestViaQuickSort(intArray47, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int85 = util68.findMinSubArrayLen((int) '#', intArray82);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, 1, (short) 1 };
        int int92 = util86.findMinSubArrayLen((-1), intArray91);
        util86.getNextPermutationNumber(intArray91);
        int int95 = util68.threeSumClosest(intArray91, (int) 'a');
        int int97 = util0.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int48 = util29.findMinSubArrayLen(3, intArray45);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util49.removeDuplicateElements(intArray62);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util66.findMinSubArrayLen((int) '#', intArray80);
        util66.getNextPermutationNumber(intArray71);
        int int85 = util49.findMinViaIteration(intArray71);
        int int87 = util29.findKthLargestViaQuickSort(intArray71, (int) '4');
        int int88 = util21.removeDuplicateElements(intArray71);
        int int89 = util0.findMinViaIteration(intArray71);
        Util util90 = new Util();
        int[] intArray95 = new int[] { 1, 1, (short) 1 };
        int int96 = util90.findMinSubArrayLen((-1), intArray95);
        int int97 = util0.removeDuplicateElements(intArray95);
        int[] intArray98 = null;
        int int99 = util0.findMinViaIteration(intArray98);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        int int40 = util0.removeDuplicateElements(intArray35);
        java.lang.Class<?> wildcardClass41 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        java.lang.Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray28 = new int[] { 1, 1, (short) 1 };
        int int29 = util23.findMinSubArrayLen((-1), intArray28);
        int int30 = util22.removeDuplicateElements(intArray28);
        int int31 = util22.findMinViaIteration(intArray28);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util32.findMinSubArrayLen((int) '#', intArray46);
        util32.getNextPermutationNumber(intArray37);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        util52.getNextPermutationNumber(intArray57);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util71.removeDuplicateElements(intArray77);
        util52.getNextPermutationNumber(intArray77);
        int int81 = util32.findMinSubArrayLen((int) ' ', intArray77);
        util22.getNextPermutationNumber(intArray77);
        int int83 = util0.removeDuplicateElements(intArray77);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findMinSubArrayLen((int) (byte) 100, intArray33);
        java.lang.Class<?> wildcardClass53 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int int39 = util0.findKthLargestViaQuickSort(intArray24, 5);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        int[] intArray73 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int74 = util47.findMinSubArrayLen(10, intArray73);
        int int75 = util40.removeDuplicateElements(intArray73);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        Util util87 = new Util();
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, 1, (short) 1 };
        int int94 = util88.findMinSubArrayLen((-1), intArray93);
        util87.getNextPermutationNumber(intArray93);
        int int96 = util77.findMinSubArrayLen(3, intArray93);
        int int97 = util40.findMinSubArrayLen(2, intArray93);
        int int98 = util0.removeDuplicateElements(intArray93);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        int int86 = util68.findKthLargestViaQuickSort(intArray82, (int) (byte) -1);
        int[] intArray94 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int95 = util68.findMinSubArrayLen(10, intArray94);
        int int96 = util0.findMinViaIteration(intArray94);
        int int98 = util0.findMinSubArrayLen(3, intArray14);
        java.lang.Class<?> wildcardClass99 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        int int10 = util0.removeDuplicateElements(intArray6);
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, (-1), (short) 10, 10 };
        int int18 = util11.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util11.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int47 = util28.findMinSubArrayLen(3, intArray44);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util48.removeDuplicateElements(intArray61);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util65.findMinSubArrayLen((int) '#', intArray79);
        util65.getNextPermutationNumber(intArray70);
        int int84 = util48.findMinViaIteration(intArray70);
        int int86 = util28.findKthLargestViaQuickSort(intArray70, (int) '4');
        util11.getNextPermutationNumber(intArray70);
        int int88 = util0.removeDuplicateElements(intArray70);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        int int72 = util64.removeDuplicateElements(intArray70);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util64.findMinSubArrayLen((int) (byte) -1, intArray79);
        util0.getNextPermutationNumber(intArray79);
        java.lang.Class<?> wildcardClass84 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, (-1), (short) 10, 10 };
        int int23 = util16.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        int int24 = util7.findMinSubArrayLen((int) '#', intArray21);
        Util util25 = new Util();
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, 1, (short) 1 };
        int int32 = util26.findMinSubArrayLen((-1), intArray31);
        int int33 = util25.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, 1, (short) 1 };
        int int42 = util36.findMinSubArrayLen((-1), intArray41);
        util35.getNextPermutationNumber(intArray41);
        int int44 = util25.findMinSubArrayLen(3, intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util45.removeDuplicateElements(intArray58);
        int int63 = util25.threeSumClosest(intArray58, (int) (short) 1);
        int int64 = util7.removeDuplicateElements(intArray58);
        int int66 = util7.threeSumClosest(intArray12, (int) (short) 1);
        int int67 = util7.findMinViaIteration(intArray41);
        int int69 = util0.threeSumClosest(intArray41, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        java.lang.Class<?> wildcardClass8 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        java.lang.Class<?> wildcardClass64 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.threeSumClosest(intArray34, 10);
        java.lang.Class<?> wildcardClass38 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util8.findMinSubArrayLen((int) '#', intArray22);
        util8.getNextPermutationNumber(intArray13);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.findKthLargestViaQuickSort(intArray32, (int) ' ');
        int int37 = util8.findMinViaIteration(intArray13);
        util0.getNextPermutationNumber(intArray13);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util39.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        int int72 = util54.findKthLargestViaQuickSort(intArray68, (int) (byte) -1);
        int[] intArray80 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int81 = util54.findMinSubArrayLen(10, intArray80);
        int int82 = util47.removeDuplicateElements(intArray80);
        int int84 = util39.threeSumClosest(intArray80, (int) 'a');
        int int86 = util39.findMinSubArrayLen((int) (byte) 1, intArray68);
        util0.getNextPermutationNumber(intArray68);
        java.lang.Class<?> wildcardClass88 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int47 = util38.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray44);
        java.lang.Class<?> wildcardClass49 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        int int49 = util0.findMinViaIteration(intArray34);
        java.lang.Class<?> wildcardClass50 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        int int57 = util0.findMinSubArrayLen(2, intArray53);
        java.lang.Class<?> wildcardClass58 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int57 = util20.threeSumClosest(intArray52, 1);
        util0.getNextPermutationNumber(intArray52);
        int int59 = util0.removeDuplicateElements(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        int[] intArray44 = new int[] { 0 };
        int int45 = util0.removeDuplicateElements(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        int int65 = util0.findKthLargestViaQuickSort(intArray60, 4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util9.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util26.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        int int62 = util26.findMinViaIteration(intArray48);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, 1, (short) 1 };
        int int90 = util84.findMinSubArrayLen((-1), intArray89);
        int int91 = util83.removeDuplicateElements(intArray89);
        util64.getNextPermutationNumber(intArray89);
        int int94 = util63.threeSumClosest(intArray89, (int) (short) 0);
        util26.getNextPermutationNumber(intArray89);
        int int96 = util9.findMinViaIteration(intArray89);
        util0.getNextPermutationNumber(intArray89);
        int[] intArray98 = null;
        util0.getNextPermutationNumber(intArray98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util44.findKthLargestViaQuickSort(intArray68, (int) ' ');
        int int74 = util0.findKthLargestViaQuickSort(intArray68, (int) 'a');
        java.lang.Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util49.findMinSubArrayLen((int) '#', intArray63);
        util49.getNextPermutationNumber(intArray54);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        util49.getNextPermutationNumber(intArray74);
        int int78 = util29.findMinSubArrayLen((int) ' ', intArray74);
        int int79 = util0.removeDuplicateElements(intArray74);
        int int80 = util0.findMinViaIteration(intArray14);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        int int29 = util0.removeDuplicateElements(intArray27);
        java.lang.Class<?> wildcardClass30 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int50 = util0.findMinViaIteration(intArray47);
        java.lang.Class<?> wildcardClass51 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        java.lang.Class<?> wildcardClass9 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        util69.getNextPermutationNumber(intArray75);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int88 = util69.findKthLargestViaQuickSort(intArray84, (int) '#');
        int int89 = util49.removeDuplicateElements(intArray84);
        int int91 = util48.threeSumClosest(intArray84, (int) '#');
        int int92 = util41.findMinViaIteration(intArray84);
        int int94 = util0.findKthLargestViaQuickSort(intArray84, (int) (short) -1);
        java.lang.Class<?> wildcardClass95 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        java.lang.Class<?> wildcardClass10 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        int[] intArray46 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int47 = util20.findMinSubArrayLen(10, intArray46);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        int int66 = util48.findKthLargestViaQuickSort(intArray62, (int) (byte) -1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util48.threeSumClosest(intArray72, 3);
        int int78 = util20.findKthLargestViaQuickSort(intArray72, (int) 'a');
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        util79.getNextPermutationNumber(intArray85);
        int int89 = util20.findKthLargestViaQuickSort(intArray85, 0);
        util20.getNextPermutationNumber(intArray85);
        int int92 = util0.threeSumClosest(intArray85, (int) '#');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util21.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util39.getNextPermutationNumber(intArray44);
        int int48 = util21.threeSumClosest(intArray44, (int) 'a');
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int67 = util49.findKthLargestViaQuickSort(intArray63, (int) (byte) -1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util49.threeSumClosest(intArray73, 3);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int86 = util49.findKthLargestViaQuickSort(intArray83, 3);
        int int87 = util21.findMinViaIteration(intArray83);
        int int89 = util0.threeSumClosest(intArray83, (int) 'a');
        util0.getNextPermutationNumber(intArray26);
        Util util91 = new Util();
        int[] intArray96 = new int[] { 1, (-1), (short) 10, 10 };
        int int98 = util91.findKthLargestViaQuickSort(intArray96, (int) (byte) 1);
        int int99 = util0.findMinViaIteration(intArray96);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        java.lang.Class<?> wildcardClass8 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int65 = util28.findKthLargestViaQuickSort(intArray62, 3);
        int int66 = util0.findMinViaIteration(intArray62);
        int[] intArray67 = null;
        int int68 = util0.threeSumClosest(intArray67, int24);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        int int79 = util0.threeSumClosest(intArray75, 3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        util20.getNextPermutationNumber(intArray45);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        int int70 = util20.threeSumClosest(intArray64, (int) (short) 100);
        int int72 = util20.findKthLargestViaQuickSort(intArray34, 6);
        int int73 = util0.findMinViaIteration(intArray34);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        int int86 = util68.findKthLargestViaQuickSort(intArray82, (int) (byte) -1);
        int[] intArray94 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int95 = util68.findMinSubArrayLen(10, intArray94);
        int int96 = util0.findMinViaIteration(intArray94);
        int int97 = util0.removeDuplicateElements(intArray14);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        int int47 = util0.findMinSubArrayLen((int) (byte) 1, intArray29);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util49.findMinSubArrayLen((int) '#', intArray63);
        util49.getNextPermutationNumber(intArray54);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        util49.getNextPermutationNumber(intArray74);
        int int79 = util48.threeSumClosest(intArray74, (int) (short) 0);
        util0.getNextPermutationNumber(intArray74);
        java.lang.Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util50.findMinSubArrayLen((int) (byte) -1, intArray65);
        int int69 = util0.removeDuplicateElements(intArray65);
        int[] intArray70 = null;
        int int72 = util0.findKthLargestViaQuickSort(intArray70, (int) (short) 0);
        int int73 = util0.removeDuplicateElements(intArray56);
        java.lang.Class<?> wildcardClass74 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        int int59 = util0.threeSumClosest(intArray5, (int) (short) 1);
        int int60 = util0.findMinViaIteration(intArray34);
        java.lang.Class<?> wildcardClass61 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int[] intArray29 = null;
        int int30 = util0.findKthLargestViaQuickSort(intArray29, int26);
        Util util31 = new Util();
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, 1, (short) 1 };
        int int38 = util32.findMinSubArrayLen((-1), intArray37);
        int int39 = util31.removeDuplicateElements(intArray37);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        util41.getNextPermutationNumber(intArray47);
        int int50 = util31.findMinSubArrayLen(3, intArray47);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, 1, (short) 1 };
        int int59 = util53.findMinSubArrayLen((-1), intArray58);
        util52.getNextPermutationNumber(intArray58);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        util61.getNextPermutationNumber(intArray67);
        int int71 = util52.findKthLargestViaQuickSort(intArray67, (int) '#');
        int int72 = util31.findMinSubArrayLen((int) '#', intArray67);
        int int73 = util31.removeDuplicateElements(intArray37);
        int int74 = util0.findMinViaIteration(intArray37);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        util0.getNextPermutationNumber(intArray14);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util25.findMinSubArrayLen((int) '#', intArray39);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        util44.getNextPermutationNumber(intArray69);
        int int74 = util43.threeSumClosest(intArray69, (int) (short) 0);
        int int75 = util25.removeDuplicateElements(intArray69);
        int int76 = util0.findMinViaIteration(intArray69);
        int[] intArray78 = null;
        int int79 = util0.findMinSubArrayLen((int) (short) -1, intArray78);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        int int57 = util0.findMinSubArrayLen(2, intArray53);
        int int59 = util0.threeSumClosest(intArray12, 10);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util61.findMinSubArrayLen((int) '#', intArray75);
        util61.getNextPermutationNumber(intArray66);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        int int88 = util80.removeDuplicateElements(intArray86);
        util61.getNextPermutationNumber(intArray86);
        int int91 = util60.threeSumClosest(intArray86, (int) (short) 0);
        int int92 = util0.findKthLargestViaQuickSort(intArray86, int88);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        java.lang.Class<?> wildcardClass79 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int57 = util0.findMinSubArrayLen(0, intArray42);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util58.findMinSubArrayLen(10, intArray63);
        Util util68 = new Util();
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        util79.getNextPermutationNumber(intArray85);
        int int88 = util69.findMinSubArrayLen(3, intArray85);
        int int89 = util68.findMinViaIteration(intArray85);
        util58.getNextPermutationNumber(intArray85);
        int int91 = util0.removeDuplicateElements(intArray85);
        java.lang.Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        util0.getNextPermutationNumber(intArray43);
        int int55 = util0.threeSumClosest(intArray43, 3);
        java.lang.Class<?> wildcardClass56 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) '4');
        java.lang.Class<?> wildcardClass50 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util58.findMinSubArrayLen((int) '#', intArray72);
        util58.getNextPermutationNumber(intArray63);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.findKthLargestViaQuickSort(intArray82, (int) ' ');
        int int87 = util0.removeDuplicateElements(intArray82);
        int[] intArray88 = null;
        int int89 = util0.findMinSubArrayLen(int37, intArray88);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int[] intArray29 = null;
        int int30 = util0.findKthLargestViaQuickSort(intArray29, int26);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util50.getNextPermutationNumber(intArray75);
        int int80 = util49.threeSumClosest(intArray75, (int) (short) 0);
        int int81 = util31.removeDuplicateElements(intArray75);
        util0.getNextPermutationNumber(intArray75);
        int int83 = util0.findMinViaIteration(intArray36);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.threeSumClosest(intArray34, 10);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int66 = util38.threeSumClosest(intArray62, 3);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int75 = util38.findKthLargestViaQuickSort(intArray72, 3);
        int int77 = util38.findKthLargestViaQuickSort(intArray62, 5);
        int int79 = util0.findKthLargestViaQuickSort(intArray62, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util28.findMinSubArrayLen((int) '#', intArray42);
        int int47 = util0.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, (-1), (short) 10, 10 };
        int int83 = util76.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int85 = util57.findKthLargestViaQuickSort(intArray81, (int) ' ');
        int int86 = util57.findMinViaIteration(intArray62);
        util49.getNextPermutationNumber(intArray62);
        int int89 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) -1);
        int int90 = util0.findMinSubArrayLen((int) (short) 10, intArray54);
        java.lang.Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util33.threeSumClosest(intArray57, 3);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int70 = util33.findKthLargestViaQuickSort(intArray67, 3);
        int int71 = util0.findMinSubArrayLen((int) 'a', intArray67);
        int int73 = util0.findMinSubArrayLen((int) (short) 100, intArray67);
        java.lang.Class<?> wildcardClass74 = intArray67.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, 1, (short) 1 };
        int int61 = util55.findMinSubArrayLen((-1), intArray60);
        int int62 = util54.removeDuplicateElements(intArray60);
        int int64 = util46.findKthLargestViaQuickSort(intArray60, (int) (byte) -1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util46.threeSumClosest(intArray70, 3);
        int int76 = util0.findKthLargestViaQuickSort(intArray70, 1);
        java.lang.Class<?> wildcardClass77 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        int int57 = util0.findMinSubArrayLen(2, intArray53);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util58.getNextPermutationNumber(intArray63);
        int[] intArray66 = null;
        int int67 = util58.removeDuplicateElements(intArray66);
        int int69 = util58.findKthLargestViaQuickSort(intArray63, (int) (short) 1);
        int int71 = util0.findKthLargestViaQuickSort(intArray63, 0);
        java.lang.Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int[] intArray78 = null;
        int int79 = util0.findMinSubArrayLen(3, intArray78);
        java.lang.Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int47 = util38.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray44);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util49.findMinSubArrayLen((int) '#', intArray63);
        util49.getNextPermutationNumber(intArray54);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util49.threeSumClosest(intArray73, int75);
        int int78 = util0.threeSumClosest(intArray73, 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        java.lang.Class<?> wildcardClass49 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util72.getNextPermutationNumber(intArray77);
        int int80 = util43.removeDuplicateElements(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        int int83 = util0.threeSumClosest(intArray36, (int) 'a');
        int int85 = util0.findKthLargestViaQuickSort(intArray27, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        util0.getNextPermutationNumber(intArray71);
        int int77 = util0.removeDuplicateElements(intArray42);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        int int42 = util0.findKthLargestViaQuickSort(intArray24, (int) (byte) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util43.findMinSubArrayLen(10, intArray48);
        int int54 = util0.threeSumClosest(intArray48, (int) (byte) 10);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util55.threeSumClosest(intArray79, int81);
        int int84 = util0.findKthLargestViaQuickSort(intArray79, 5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util51.findMinSubArrayLen((int) '#', intArray65);
        util51.getNextPermutationNumber(intArray56);
        int int70 = util0.findMinViaIteration(intArray56);
        java.lang.Class<?> wildcardClass71 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        util65.getNextPermutationNumber(intArray70);
        int[] intArray73 = null;
        int int74 = util65.removeDuplicateElements(intArray73);
        int int76 = util65.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        int int77 = util0.findMinSubArrayLen(7, intArray70);
        java.lang.Class<?> wildcardClass78 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        util20.getNextPermutationNumber(intArray45);
        int int49 = util0.findMinSubArrayLen((int) ' ', intArray45);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util50.getNextPermutationNumber(intArray75);
        int int80 = util0.threeSumClosest(intArray75, (int) (short) 0);
        int int81 = util0.findMinViaIteration(intArray45);
        java.lang.Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util38.findMinSubArrayLen((int) '#', intArray52);
        util38.getNextPermutationNumber(intArray43);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int68 = util38.threeSumClosest(intArray63, (int) (byte) 0);
        int int69 = util0.removeDuplicateElements(intArray63);
        java.lang.Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        util39.getNextPermutationNumber(intArray64);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        int int87 = util68.findKthLargestViaQuickSort(intArray83, (int) '#');
        int int89 = util39.threeSumClosest(intArray83, (int) (short) 100);
        int int91 = util0.findKthLargestViaQuickSort(intArray83, (int) ' ');
        util0.getNextPermutationNumber(intArray16);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        Util util87 = new Util();
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, 1, (short) 1 };
        int int94 = util88.findMinSubArrayLen((-1), intArray93);
        util87.getNextPermutationNumber(intArray93);
        int int96 = util77.findMinSubArrayLen(3, intArray93);
        int int97 = util0.findMinViaIteration(intArray93);
        int[] intArray98 = null;
        int int99 = util0.findMinViaIteration(intArray98);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util27.findMinSubArrayLen((int) '#', intArray41);
        util27.getNextPermutationNumber(intArray32);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util27.findKthLargestViaQuickSort(intArray51, (int) ' ');
        int int57 = util8.findKthLargestViaQuickSort(intArray51, (int) (short) -1);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util58.findMinSubArrayLen((int) (byte) -1, intArray73);
        int int77 = util8.removeDuplicateElements(intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        int[] intArray80 = null;
        int int81 = util0.findMinSubArrayLen((int) 'a', intArray80);
        java.lang.Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util46.removeDuplicateElements(intArray59);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, (-1), (short) 10, 10 };
        int int79 = util72.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int80 = util63.findMinSubArrayLen((int) '#', intArray77);
        util63.getNextPermutationNumber(intArray68);
        int int82 = util46.findMinViaIteration(intArray68);
        int int83 = util0.removeDuplicateElements(intArray68);
        java.lang.Class<?> wildcardClass84 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        util29.getNextPermutationNumber(intArray34);
        int int77 = util0.removeDuplicateElements(intArray34);
        int int79 = util0.findMinSubArrayLen(10, intArray24);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        int int33 = util0.findMinSubArrayLen(0, intArray6);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, 1, (short) 1 };
        int int40 = util34.findMinSubArrayLen((-1), intArray39);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int57 = util49.removeDuplicateElements(intArray55);
        int int59 = util41.findKthLargestViaQuickSort(intArray55, (int) (byte) -1);
        int[] intArray67 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int68 = util41.findMinSubArrayLen(10, intArray67);
        int int69 = util34.removeDuplicateElements(intArray67);
        int int71 = util0.findKthLargestViaQuickSort(intArray67, 10);
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util51.getNextPermutationNumber(intArray57);
        int int60 = util41.findMinSubArrayLen(3, intArray57);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util61.findMinSubArrayLen((int) '#', intArray75);
        util61.getNextPermutationNumber(intArray66);
        int int81 = util61.findMinSubArrayLen(0, intArray75);
        util41.getNextPermutationNumber(intArray75);
        int int84 = util0.findKthLargestViaQuickSort(intArray75, 7);
        java.lang.Class<?> wildcardClass85 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        util9.getNextPermutationNumber(intArray34);
        int int38 = util0.removeDuplicateElements(intArray34);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        int int55 = util47.removeDuplicateElements(intArray53);
        int int57 = util39.findKthLargestViaQuickSort(intArray53, (int) (byte) -1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util39.threeSumClosest(intArray63, 3);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        util68.getNextPermutationNumber(intArray73);
        int int76 = util39.removeDuplicateElements(intArray73);
        int int78 = util0.threeSumClosest(intArray73, 1);
        java.lang.Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        int int10 = util0.removeDuplicateElements(intArray6);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        int int19 = util11.removeDuplicateElements(intArray17);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        int int30 = util11.findMinSubArrayLen(3, intArray27);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, 1, (short) 1 };
        int int39 = util33.findMinSubArrayLen((-1), intArray38);
        util32.getNextPermutationNumber(intArray38);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        util41.getNextPermutationNumber(intArray47);
        int int51 = util32.findKthLargestViaQuickSort(intArray47, (int) '#');
        int int52 = util11.findMinSubArrayLen((int) '#', intArray47);
        int int53 = util11.removeDuplicateElements(intArray17);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        int int72 = util54.findKthLargestViaQuickSort(intArray68, (int) (byte) -1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int82 = util54.threeSumClosest(intArray78, 3);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, 1, (short) 1 };
        int int89 = util83.findMinSubArrayLen((-1), intArray88);
        util83.getNextPermutationNumber(intArray88);
        int int91 = util54.removeDuplicateElements(intArray88);
        int int92 = util11.findMinViaIteration(intArray88);
        int int94 = util11.threeSumClosest(intArray47, (int) 'a');
        int int95 = util0.findMinViaIteration(intArray47);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int57 = util0.findMinSubArrayLen(0, intArray42);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util58.findMinSubArrayLen(10, intArray63);
        Util util68 = new Util();
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        util79.getNextPermutationNumber(intArray85);
        int int88 = util69.findMinSubArrayLen(3, intArray85);
        int int89 = util68.findMinViaIteration(intArray85);
        util58.getNextPermutationNumber(intArray85);
        int int91 = util0.removeDuplicateElements(intArray85);
        int int93 = util0.findKthLargestViaQuickSort(intArray14, (int) 'a');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        int[] intArray44 = new int[] { 0 };
        int int45 = util0.removeDuplicateElements(intArray44);
        java.lang.Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int58 = util0.findKthLargestViaQuickSort(intArray42, (int) '4');
        java.lang.Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        int int77 = util0.findKthLargestViaQuickSort(intArray71, (int) '#');
        java.lang.Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util57.removeDuplicateElements(intArray70);
        int int75 = util38.threeSumClosest(intArray70, 1);
        util38.getNextPermutationNumber(intArray62);
        int int78 = util0.findKthLargestViaQuickSort(intArray62, (int) (short) -1);
        java.lang.Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int39 = util22.findMinSubArrayLen((int) '#', intArray36);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        int int58 = util40.findKthLargestViaQuickSort(intArray54, (int) (byte) -1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util60.removeDuplicateElements(intArray73);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, (-1), (short) 10, 10 };
        int int93 = util86.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util77.findMinSubArrayLen((int) '#', intArray91);
        util77.getNextPermutationNumber(intArray82);
        int int96 = util60.findMinViaIteration(intArray82);
        int int97 = util40.findMinSubArrayLen(0, intArray82);
        int int98 = util22.findMinViaIteration(intArray82);
        util0.getNextPermutationNumber(intArray82);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        java.lang.Class<?> wildcardClass32 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        int int86 = util68.findKthLargestViaQuickSort(intArray82, (int) (byte) -1);
        int[] intArray94 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int95 = util68.findMinSubArrayLen(10, intArray94);
        int int96 = util0.findMinViaIteration(intArray94);
        java.lang.Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int59 = util0.threeSumClosest(intArray56, (int) (byte) 100);
        int int61 = util0.findMinSubArrayLen(4, intArray14);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        int int40 = util22.findKthLargestViaQuickSort(intArray36, (int) (byte) -1);
        int[] intArray48 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int49 = util22.findMinSubArrayLen(10, intArray48);
        int int51 = util22.findMinSubArrayLen((-1), intArray36);
        int int52 = util0.threeSumClosest(intArray36, int40);
        int[] intArray53 = null;
        int int55 = util0.findKthLargestViaQuickSort(intArray53, 6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        util24.getNextPermutationNumber(intArray29);
        int[] intArray32 = null;
        int int33 = util24.removeDuplicateElements(intArray32);
        int int35 = util24.findKthLargestViaQuickSort(intArray29, (int) (short) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util44.findKthLargestViaQuickSort(intArray68, (int) ' ');
        int int73 = util44.findMinViaIteration(intArray49);
        util36.getNextPermutationNumber(intArray49);
        int int75 = util24.findMinViaIteration(intArray49);
        int int77 = util0.threeSumClosest(intArray49, (int) (byte) 1);
        java.lang.Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findMinSubArrayLen((int) (byte) 100, intArray33);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        util53.getNextPermutationNumber(intArray59);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        int int72 = util53.findKthLargestViaQuickSort(intArray68, (int) '#');
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, 1, (short) 1 };
        int int79 = util73.findMinSubArrayLen((-1), intArray78);
        int int81 = util53.threeSumClosest(intArray78, 6);
        int int83 = util0.threeSumClosest(intArray78, 7);
        java.lang.Class<?> wildcardClass84 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, 1, (short) 1 };
        int int51 = util45.findMinSubArrayLen((-1), intArray50);
        int int52 = util44.removeDuplicateElements(intArray50);
        int int54 = util36.findKthLargestViaQuickSort(intArray50, (int) (byte) -1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int64 = util36.threeSumClosest(intArray60, 3);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        int int73 = util36.findKthLargestViaQuickSort(intArray70, 3);
        int int74 = util28.findMinViaIteration(intArray70);
        util28.getNextPermutationNumber(intArray33);
        int int77 = util0.threeSumClosest(intArray33, 100);
        java.lang.Class<?> wildcardClass78 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int[] intArray78 = null;
        int int79 = util0.findMinSubArrayLen(3, intArray78);
        int int80 = util0.removeDuplicateElements(intArray27);
        java.lang.Class<?> wildcardClass81 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        int[] intArray64 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int65 = util38.findMinSubArrayLen(10, intArray64);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        int int84 = util66.findKthLargestViaQuickSort(intArray80, (int) (byte) -1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util66.threeSumClosest(intArray90, 3);
        int int96 = util38.findKthLargestViaQuickSort(intArray90, (int) 'a');
        int int97 = util0.removeDuplicateElements(intArray90);
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.threeSumClosest(intArray34, 10);
        java.lang.Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int int9 = util0.findMinSubArrayLen(10, intArray5);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        int int18 = util10.removeDuplicateElements(intArray16);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        int int29 = util10.findMinSubArrayLen(3, intArray26);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int48 = util30.findKthLargestViaQuickSort(intArray44, (int) (byte) -1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util49.removeDuplicateElements(intArray62);
        int int67 = util30.threeSumClosest(intArray62, 1);
        util10.getNextPermutationNumber(intArray62);
        int int70 = util10.threeSumClosest(intArray62, 0);
        int int72 = util0.threeSumClosest(intArray62, (int) '4');
        int int74 = util0.threeSumClosest(intArray26, 6);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        int int38 = util0.findMinSubArrayLen(int34, intArray24);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util39.findMinSubArrayLen((int) (byte) -1, intArray54);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util59.findMinSubArrayLen((int) '#', intArray73);
        util59.getNextPermutationNumber(intArray64);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util59.threeSumClosest(intArray83, int85);
        int int87 = util39.findMinSubArrayLen(10, intArray83);
        int int88 = util39.findMinViaIteration(intArray73);
        int int90 = util0.threeSumClosest(intArray73, 7);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        util0.getNextPermutationNumber(intArray43);
        int int55 = util0.threeSumClosest(intArray43, 3);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        util57.getNextPermutationNumber(intArray82);
        int int87 = util56.threeSumClosest(intArray82, (int) (short) 0);
        int int89 = util56.findMinSubArrayLen(0, intArray62);
        int int90 = util0.findMinViaIteration(intArray62);
        java.lang.Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        java.lang.Class<?> wildcardClass43 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        Util util24 = new Util();
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, 1, (short) 1 };
        int int31 = util25.findMinSubArrayLen((-1), intArray30);
        int int32 = util24.removeDuplicateElements(intArray30);
        int int33 = util24.findMinViaIteration(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, 1, (short) 1 };
        int int49 = util43.findMinSubArrayLen((-1), intArray48);
        int int50 = util42.removeDuplicateElements(intArray48);
        int int52 = util34.findKthLargestViaQuickSort(intArray48, (int) (byte) -1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int62 = util34.threeSumClosest(intArray58, 3);
        util24.getNextPermutationNumber(intArray58);
        int int64 = util0.removeDuplicateElements(intArray58);
        java.lang.Class<?> wildcardClass65 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findMinSubArrayLen((int) (byte) 100, intArray33);
        int int54 = util0.findKthLargestViaQuickSort(intArray33, 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        int int73 = util55.findKthLargestViaQuickSort(intArray69, (int) (byte) -1);
        int[] intArray81 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int82 = util55.findMinSubArrayLen(10, intArray81);
        int int83 = util0.threeSumClosest(intArray81, int16);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util30.findMinSubArrayLen((int) '#', intArray44);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util49.findMinSubArrayLen((int) '#', intArray63);
        util49.getNextPermutationNumber(intArray54);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        util49.getNextPermutationNumber(intArray74);
        int int79 = util48.threeSumClosest(intArray74, (int) (short) 0);
        int int80 = util30.removeDuplicateElements(intArray74);
        int int82 = util30.findMinSubArrayLen((int) (byte) 100, intArray63);
        int int84 = util30.findKthLargestViaQuickSort(intArray63, 1);
        int int85 = util0.findMinSubArrayLen((int) (byte) -1, intArray63);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util29.getNextPermutationNumber(intArray34);
        int int37 = util0.removeDuplicateElements(intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int55 = util0.removeDuplicateElements(intArray51);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util56.removeDuplicateElements(intArray69);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util73.findMinSubArrayLen((int) '#', intArray87);
        util73.getNextPermutationNumber(intArray78);
        int int92 = util56.findMinViaIteration(intArray78);
        int int93 = util56.removeDuplicateElements(intArray78);
        int int94 = util0.findMinViaIteration(intArray78);
        java.lang.Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        java.lang.Class<?> wildcardClass88 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        int int18 = util10.removeDuplicateElements(intArray16);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, 1, (short) 1 };
        int int34 = util28.findMinSubArrayLen((-1), intArray33);
        int int35 = util27.removeDuplicateElements(intArray33);
        int int37 = util19.findKthLargestViaQuickSort(intArray33, (int) (byte) -1);
        int[] intArray45 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int46 = util19.findMinSubArrayLen(10, intArray45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int75 = util47.threeSumClosest(intArray71, 3);
        int int77 = util19.findKthLargestViaQuickSort(intArray71, (int) 'a');
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int88 = util19.findKthLargestViaQuickSort(intArray84, 0);
        util19.getNextPermutationNumber(intArray84);
        int int91 = util10.threeSumClosest(intArray84, 1);
        int int92 = util10.threeSumClosest(intArray52, int18);
        int int93 = util0.findMinViaIteration(intArray52);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        int[] intArray46 = null;
        int int48 = util0.findKthLargestViaQuickSort(intArray46, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        int int77 = util0.findKthLargestViaQuickSort(intArray71, (int) '#');
        int int79 = util0.findMinSubArrayLen((-1), intArray15);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util47.findMinSubArrayLen((int) '#', intArray61);
        util47.getNextPermutationNumber(intArray52);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        util47.getNextPermutationNumber(intArray72);
        int int77 = util46.threeSumClosest(intArray72, (int) (short) 0);
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, (-1), (short) 10, 10 };
        int int86 = util79.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, (-1), (short) 10, 10 };
        int int94 = util87.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util79.removeDuplicateElements(intArray92);
        int int96 = util46.findMinSubArrayLen(1, intArray92);
        int int98 = util46.findKthLargestViaQuickSort(intArray61, (int) (byte) 100);
        int int99 = util0.findMinViaIteration(intArray61);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 5 + "'", int95 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        util0.getNextPermutationNumber(intArray5);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        int int66 = util48.findKthLargestViaQuickSort(intArray62, (int) (byte) -1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util48.threeSumClosest(intArray72, 3);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        util77.getNextPermutationNumber(intArray82);
        int int85 = util48.removeDuplicateElements(intArray82);
        util0.getNextPermutationNumber(intArray82);
        int[] intArray87 = null;
        int int88 = util0.removeDuplicateElements(intArray87);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        int int21 = util0.findKthLargestViaQuickSort(intArray6, 1);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        int int40 = util22.findKthLargestViaQuickSort(intArray36, (int) (byte) -1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util41.findKthLargestViaQuickSort(intArray65, (int) ' ');
        int int71 = util22.findKthLargestViaQuickSort(intArray65, (int) (short) -1);
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, 1, (short) 1 };
        int int79 = util73.findMinSubArrayLen((-1), intArray78);
        int int80 = util72.removeDuplicateElements(intArray78);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util72.findMinSubArrayLen((int) (byte) -1, intArray87);
        int int91 = util22.removeDuplicateElements(intArray87);
        int[] intArray92 = null;
        int int94 = util22.findKthLargestViaQuickSort(intArray92, (int) (short) 0);
        int int95 = util22.removeDuplicateElements(intArray78);
        int int97 = util0.threeSumClosest(intArray78, 7);
        int[] intArray98 = null;
        util0.getNextPermutationNumber(intArray98);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        util0.getNextPermutationNumber(intArray5);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        int int66 = util48.findKthLargestViaQuickSort(intArray62, (int) (byte) -1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util48.threeSumClosest(intArray72, 3);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        util77.getNextPermutationNumber(intArray82);
        int int85 = util48.removeDuplicateElements(intArray82);
        util0.getNextPermutationNumber(intArray82);
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        util87.getNextPermutationNumber(intArray92);
        util0.getNextPermutationNumber(intArray92);
        java.lang.Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        util69.getNextPermutationNumber(intArray75);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int88 = util69.findKthLargestViaQuickSort(intArray84, (int) '#');
        int int89 = util49.removeDuplicateElements(intArray84);
        int int91 = util48.threeSumClosest(intArray84, (int) '#');
        int int92 = util41.findMinViaIteration(intArray84);
        int int94 = util0.findKthLargestViaQuickSort(intArray84, (int) (short) -1);
        int[] intArray95 = null;
        int int97 = util0.threeSumClosest(intArray95, 7);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        int int11 = util0.findKthLargestViaQuickSort(intArray5, (int) (short) 1);
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, (-1), (short) 10, 10 };
        int int19 = util12.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        int int29 = util12.findMinSubArrayLen((int) '#', intArray26);
        int int30 = util0.findMinViaIteration(intArray26);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int58 = util39.findMinSubArrayLen(3, intArray55);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util59.removeDuplicateElements(intArray72);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, (-1), (short) 10, 10 };
        int int83 = util76.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int93 = util76.findMinSubArrayLen((int) '#', intArray90);
        util76.getNextPermutationNumber(intArray81);
        int int95 = util59.findMinViaIteration(intArray81);
        int int97 = util39.findKthLargestViaQuickSort(intArray81, (int) '4');
        int int98 = util31.removeDuplicateElements(intArray81);
        int int99 = util0.removeDuplicateElements(intArray81);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 5 + "'", int99 == 5);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int65 = util28.findKthLargestViaQuickSort(intArray62, 3);
        int int66 = util0.findMinViaIteration(intArray62);
        Util util67 = new Util();
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int87 = util68.findMinSubArrayLen(3, intArray84);
        int int88 = util67.findMinViaIteration(intArray84);
        int int89 = util0.findKthLargestViaQuickSort(intArray84, int43);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int[] intArray8 = null;
        int int9 = util0.findMinViaIteration(intArray8);
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, (-1), (short) 10, 10 };
        int int18 = util11.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int int28 = util11.findMinSubArrayLen((int) '#', intArray25);
        util11.getNextPermutationNumber(intArray16);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util11.threeSumClosest(intArray35, int37);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int56 = util11.findKthLargestViaQuickSort(intArray52, int46);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int66 = util11.findKthLargestViaQuickSort(intArray62, (int) (short) 100);
        int int67 = util0.findMinSubArrayLen((int) ' ', intArray62);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int87 = util68.findMinSubArrayLen(3, intArray84);
        int int88 = util0.removeDuplicateElements(intArray84);
        util0.getNextPermutationNumber(intArray84);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util38.findMinSubArrayLen((int) '#', intArray52);
        util38.getNextPermutationNumber(intArray43);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        util38.getNextPermutationNumber(intArray63);
        int int68 = util37.threeSumClosest(intArray63, (int) (short) 0);
        util0.getNextPermutationNumber(intArray63);
        java.lang.Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        int int11 = util0.findMinSubArrayLen(1, intArray5);
        Util util12 = new Util();
        Util util13 = new Util();
        int[] intArray18 = new int[] { 1, (-1), (short) 10, 10 };
        int int20 = util13.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int int30 = util13.findMinSubArrayLen((int) '#', intArray27);
        util13.getNextPermutationNumber(intArray18);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, 1, (short) 1 };
        int int39 = util33.findMinSubArrayLen((-1), intArray38);
        int int40 = util32.removeDuplicateElements(intArray38);
        util13.getNextPermutationNumber(intArray38);
        int int43 = util12.threeSumClosest(intArray38, (int) (short) 0);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util45.removeDuplicateElements(intArray58);
        int int62 = util12.findMinSubArrayLen(1, intArray58);
        int int64 = util12.findKthLargestViaQuickSort(intArray27, (int) (byte) 100);
        int int66 = util0.threeSumClosest(intArray27, 1);
        java.lang.Class<?> wildcardClass67 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        int int59 = util0.threeSumClosest(intArray5, (int) (short) 1);
        int int61 = util0.findMinSubArrayLen(5, intArray5);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        int int78 = util70.removeDuplicateElements(intArray76);
        int int80 = util62.findKthLargestViaQuickSort(intArray76, (int) (byte) -1);
        int int81 = util62.removeDuplicateElements(intArray76);
        int int83 = util0.threeSumClosest(intArray76, (int) (byte) 0);
        int int85 = util0.findMinSubArrayLen(6, intArray34);
        int[] intArray86 = null;
        int int87 = util0.removeDuplicateElements(intArray86);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        util42.getNextPermutationNumber(intArray47);
        int[] intArray50 = null;
        int int51 = util42.removeDuplicateElements(intArray50);
        int int53 = util42.findKthLargestViaQuickSort(intArray47, (int) (short) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray47, (int) (short) -1);
        java.lang.Class<?> wildcardClass56 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        int int40 = util20.findMinSubArrayLen(0, intArray34);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray16);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        util0.getNextPermutationNumber(intArray34);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, 1, (short) 1 };
        int int92 = util86.findMinSubArrayLen((-1), intArray91);
        util86.getNextPermutationNumber(intArray91);
        util0.getNextPermutationNumber(intArray91);
        int[] intArray95 = null;
        int int97 = util0.threeSumClosest(intArray95, (int) ' ');
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray36 = null;
        int int37 = util28.findMinViaIteration(intArray36);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util39.threeSumClosest(intArray63, int65);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util67.removeDuplicateElements(intArray80);
        int int84 = util39.findKthLargestViaQuickSort(intArray80, int74);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util39.findKthLargestViaQuickSort(intArray90, (int) (short) 100);
        int int95 = util28.findMinSubArrayLen((int) ' ', intArray90);
        int int97 = util0.threeSumClosest(intArray90, 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int int44 = util0.threeSumClosest(intArray7, int41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        int int63 = util45.findKthLargestViaQuickSort(intArray59, (int) (byte) -1);
        int[] intArray71 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int72 = util45.findMinSubArrayLen(10, intArray71);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util73.findMinSubArrayLen((int) '#', intArray87);
        int int92 = util45.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int93 = util0.removeDuplicateElements(intArray87);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        int int77 = util0.findKthLargestViaQuickSort(intArray71, (int) '#');
        int int78 = util0.removeDuplicateElements(intArray6);
        java.lang.Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        util24.getNextPermutationNumber(intArray29);
        int[] intArray32 = null;
        int int33 = util24.removeDuplicateElements(intArray32);
        int int35 = util24.findKthLargestViaQuickSort(intArray29, (int) (short) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util44.findKthLargestViaQuickSort(intArray68, (int) ' ');
        int int73 = util44.findMinViaIteration(intArray49);
        util36.getNextPermutationNumber(intArray49);
        int int75 = util24.findMinViaIteration(intArray49);
        int int77 = util0.threeSumClosest(intArray49, (int) (byte) 1);
        java.lang.Class<?> wildcardClass78 = intArray49.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util72.getNextPermutationNumber(intArray77);
        int int80 = util43.removeDuplicateElements(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        java.lang.Class<?> wildcardClass82 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int57 = util49.removeDuplicateElements(intArray55);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util49.findMinSubArrayLen((int) (byte) -1, intArray64);
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, (-1), (short) 10, 10 };
        int int76 = util69.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util69.findMinSubArrayLen((int) '#', intArray83);
        util69.getNextPermutationNumber(intArray74);
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, (-1), (short) 10, 10 };
        int int95 = util88.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int96 = util69.threeSumClosest(intArray93, int95);
        int int97 = util49.findMinSubArrayLen(10, intArray93);
        int int99 = util0.findKthLargestViaQuickSort(intArray93, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        int int47 = util0.findMinSubArrayLen((int) (byte) 1, intArray29);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        util57.getNextPermutationNumber(intArray82);
        int int86 = util48.removeDuplicateElements(intArray82);
        int int88 = util48.findMinSubArrayLen((int) (short) -1, intArray62);
        int int89 = util0.removeDuplicateElements(intArray62);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int80 = util0.findMinSubArrayLen(6, intArray51);
        Util util81 = new Util();
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, 1, (short) 1 };
        int int88 = util82.findMinSubArrayLen((-1), intArray87);
        util81.getNextPermutationNumber(intArray87);
        util0.getNextPermutationNumber(intArray87);
        int int92 = util0.findMinSubArrayLen(5, intArray36);
        java.lang.Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util50.removeDuplicateElements(intArray63);
        int int67 = util0.findMinViaIteration(intArray63);
        java.lang.Class<?> wildcardClass68 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        util9.getNextPermutationNumber(intArray34);
        int int38 = util0.removeDuplicateElements(intArray34);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        int int55 = util47.removeDuplicateElements(intArray53);
        int int57 = util39.findKthLargestViaQuickSort(intArray53, (int) (byte) -1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util39.threeSumClosest(intArray63, 3);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        util68.getNextPermutationNumber(intArray73);
        int int76 = util39.removeDuplicateElements(intArray73);
        int int78 = util0.threeSumClosest(intArray73, 1);
        int int79 = util0.findMinViaIteration(intArray44);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        util0.getNextPermutationNumber(intArray34);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, 1, (short) 1 };
        int int92 = util86.findMinSubArrayLen((-1), intArray91);
        util86.getNextPermutationNumber(intArray91);
        util0.getNextPermutationNumber(intArray91);
        java.lang.Class<?> wildcardClass95 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        java.lang.Class<?> wildcardClass21 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, 1, (short) 1 };
        int int40 = util34.findMinSubArrayLen((-1), intArray39);
        int int41 = util33.removeDuplicateElements(intArray39);
        int int43 = util25.findKthLargestViaQuickSort(intArray39, (int) (byte) -1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int int53 = util25.threeSumClosest(intArray49, 3);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int62 = util25.threeSumClosest(intArray59, 10);
        int int63 = util0.findMinSubArrayLen(6, intArray59);
        java.lang.Class<?> wildcardClass64 = intArray59.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        int int38 = util0.findMinSubArrayLen(int17, intArray34);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        util41.getNextPermutationNumber(intArray66);
        int int71 = util40.threeSumClosest(intArray66, (int) (short) 0);
        int int72 = util0.findMinSubArrayLen(6, intArray66);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, (-1), (short) 10, 10 };
        int int18 = util11.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int int28 = util11.findMinSubArrayLen((int) '#', intArray25);
        util11.getNextPermutationNumber(intArray16);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        util11.getNextPermutationNumber(intArray36);
        int int41 = util10.threeSumClosest(intArray36, (int) (short) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int80 = util43.findKthLargestViaQuickSort(intArray77, 3);
        int int81 = util10.findMinSubArrayLen((int) 'a', intArray77);
        int int83 = util0.threeSumClosest(intArray77, 7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        int int84 = util75.findMinViaIteration(intArray81);
        int int85 = util46.removeDuplicateElements(intArray81);
        int int87 = util0.findKthLargestViaQuickSort(intArray81, (int) (short) 100);
        util0.getNextPermutationNumber(intArray51);
        int int89 = util0.findMinViaIteration(intArray71);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int55 = util46.findMinViaIteration(intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        int int72 = util64.removeDuplicateElements(intArray70);
        int int74 = util56.findKthLargestViaQuickSort(intArray70, (int) (byte) -1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int84 = util56.threeSumClosest(intArray80, 3);
        util46.getNextPermutationNumber(intArray80);
        util0.getNextPermutationNumber(intArray80);
        java.lang.Class<?> wildcardClass87 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        java.lang.Class<?> wildcardClass28 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int57 = util0.findMinSubArrayLen(0, intArray42);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        int int75 = util67.removeDuplicateElements(intArray73);
        int int77 = util59.findKthLargestViaQuickSort(intArray73, (int) (byte) -1);
        int[] intArray85 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int86 = util59.findMinSubArrayLen(10, intArray85);
        int int88 = util59.findKthLargestViaQuickSort(intArray73, (int) (short) -1);
        int int89 = util0.findMinSubArrayLen(1, intArray73);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int67 = util49.findKthLargestViaQuickSort(intArray63, (int) (byte) -1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util49.threeSumClosest(intArray73, 3);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int86 = util49.findKthLargestViaQuickSort(intArray83, 3);
        int int87 = util41.findMinViaIteration(intArray83);
        int int88 = util0.removeDuplicateElements(intArray83);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int74 = util37.findKthLargestViaQuickSort(intArray71, 3);
        int int75 = util29.findMinViaIteration(intArray71);
        util29.getNextPermutationNumber(intArray34);
        int int77 = util0.removeDuplicateElements(intArray34);
        int int79 = util0.threeSumClosest(intArray5, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util29.getNextPermutationNumber(intArray34);
        int int37 = util0.removeDuplicateElements(intArray34);
        java.lang.Class<?> wildcardClass38 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        Util util87 = new Util();
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, 1, (short) 1 };
        int int94 = util88.findMinSubArrayLen((-1), intArray93);
        util87.getNextPermutationNumber(intArray93);
        int int96 = util77.findMinSubArrayLen(3, intArray93);
        int int97 = util0.findMinViaIteration(intArray93);
        java.lang.Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util46.threeSumClosest(intArray70, int72);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int91 = util46.findKthLargestViaQuickSort(intArray87, int81);
        int int92 = util0.removeDuplicateElements(intArray87);
        int int93 = util0.findMinViaIteration(intArray36);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        util65.getNextPermutationNumber(intArray70);
        int[] intArray73 = null;
        int int74 = util65.removeDuplicateElements(intArray73);
        int int76 = util65.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        int int77 = util0.findMinSubArrayLen(7, intArray70);
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, (-1), (short) 10, 10 };
        int int86 = util79.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, (-1), (short) 10, 10 };
        int int95 = util88.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int96 = util79.findMinSubArrayLen((int) '#', intArray93);
        util79.getNextPermutationNumber(intArray84);
        int int98 = util0.findMinSubArrayLen((int) (short) 10, intArray84);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int65 = util28.findKthLargestViaQuickSort(intArray62, 3);
        int int66 = util0.findMinViaIteration(intArray62);
        int[] intArray67 = null;
        int int68 = util0.threeSumClosest(intArray67, int24);
        java.lang.Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util51.getNextPermutationNumber(intArray57);
        int int60 = util41.findMinSubArrayLen(3, intArray57);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        int int81 = util62.findKthLargestViaQuickSort(intArray77, (int) '#');
        int int82 = util41.findMinSubArrayLen((int) '#', intArray77);
        int int83 = util0.removeDuplicateElements(intArray77);
        int int85 = util0.findMinSubArrayLen((int) (byte) 100, intArray5);
        Util util86 = new Util();
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        util86.getNextPermutationNumber(intArray92);
        int int96 = util0.findKthLargestViaQuickSort(intArray92, 3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int69 = util0.findKthLargestViaQuickSort(intArray65, 0);
        int int71 = util0.findKthLargestViaQuickSort(intArray42, (int) ' ');
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util0.findMinViaIteration(intArray77);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util58.findMinSubArrayLen((int) '#', intArray72);
        util58.getNextPermutationNumber(intArray63);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.findKthLargestViaQuickSort(intArray82, (int) ' ');
        int int87 = util0.removeDuplicateElements(intArray82);
        java.lang.Class<?> wildcardClass88 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util10.findMinSubArrayLen((int) '#', intArray24);
        util10.getNextPermutationNumber(intArray15);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util30.findMinSubArrayLen((int) '#', intArray44);
        util30.getNextPermutationNumber(intArray35);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int57 = util49.removeDuplicateElements(intArray55);
        util30.getNextPermutationNumber(intArray55);
        int int59 = util10.findMinSubArrayLen((int) ' ', intArray55);
        util0.getNextPermutationNumber(intArray55);
        int int61 = util0.findMinViaIteration(intArray35);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        java.lang.Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        int int40 = util0.removeDuplicateElements(intArray35);
        java.lang.Class<?> wildcardClass41 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int int9 = util0.findMinSubArrayLen(10, intArray5);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util18.threeSumClosest(intArray42, 3);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util18.findKthLargestViaQuickSort(intArray52, 3);
        int int56 = util10.findMinViaIteration(intArray52);
        util10.getNextPermutationNumber(intArray15);
        int int58 = util0.removeDuplicateElements(intArray15);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util0.findMinSubArrayLen(int46, intArray74);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        int int8 = util0.findKthLargestViaQuickSort(intArray5, 4);
        java.lang.Class<?> wildcardClass9 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        int int38 = util0.findMinSubArrayLen(int17, intArray34);
        java.lang.Class<?> wildcardClass39 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        util0.getNextPermutationNumber(intArray14);
        Util util25 = new Util();
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, 1, (short) 1 };
        int int32 = util26.findMinSubArrayLen((-1), intArray31);
        int int33 = util25.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, 1, (short) 1 };
        int int42 = util36.findMinSubArrayLen((-1), intArray41);
        util35.getNextPermutationNumber(intArray41);
        int int44 = util25.findMinSubArrayLen(3, intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        int int63 = util45.findKthLargestViaQuickSort(intArray59, (int) (byte) -1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int73 = util45.threeSumClosest(intArray69, 3);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, 1, (short) 1 };
        int int80 = util74.findMinSubArrayLen((-1), intArray79);
        util74.getNextPermutationNumber(intArray79);
        int int82 = util45.removeDuplicateElements(intArray79);
        int int83 = util25.removeDuplicateElements(intArray79);
        int int84 = util0.removeDuplicateElements(intArray79);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        util31.getNextPermutationNumber(intArray36);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        util31.getNextPermutationNumber(intArray56);
        int int61 = util30.threeSumClosest(intArray56, (int) (short) 0);
        int int62 = util0.findMinSubArrayLen((int) 'a', intArray56);
        int int63 = util0.findMinViaIteration(intArray56);
        java.lang.Class<?> wildcardClass64 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util8.findMinSubArrayLen((int) '#', intArray22);
        util8.getNextPermutationNumber(intArray13);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.findKthLargestViaQuickSort(intArray32, (int) ' ');
        int int37 = util8.findMinViaIteration(intArray13);
        util0.getNextPermutationNumber(intArray13);
        int int40 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) -1);
        int int42 = util0.findMinSubArrayLen(0, intArray5);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, 1, (short) 1 };
        int int49 = util43.findMinSubArrayLen((-1), intArray48);
        util43.getNextPermutationNumber(intArray48);
        int int52 = util0.findKthLargestViaQuickSort(intArray48, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        java.lang.Class<?> wildcardClass29 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        int int37 = util18.findMinSubArrayLen(3, intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util18.threeSumClosest(intArray51, (int) (short) 1);
        int int57 = util0.removeDuplicateElements(intArray51);
        int int59 = util0.threeSumClosest(intArray5, (int) (short) 1);
        int int61 = util0.findMinSubArrayLen(5, intArray5);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        int int78 = util70.removeDuplicateElements(intArray76);
        int int80 = util62.findKthLargestViaQuickSort(intArray76, (int) (byte) -1);
        int int81 = util62.removeDuplicateElements(intArray76);
        int int83 = util0.threeSumClosest(intArray76, (int) (byte) 0);
        java.lang.Class<?> wildcardClass84 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util18.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int int52 = util35.findMinSubArrayLen((int) '#', intArray49);
        util35.getNextPermutationNumber(intArray40);
        int int54 = util18.findMinViaIteration(intArray40);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int86 = util55.threeSumClosest(intArray81, (int) (short) 0);
        util18.getNextPermutationNumber(intArray81);
        int int88 = util0.findMinSubArrayLen((int) (byte) 100, intArray81);
        int int89 = util0.removeDuplicateElements(intArray49);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util8.findMinSubArrayLen((int) '#', intArray22);
        util8.getNextPermutationNumber(intArray13);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.findKthLargestViaQuickSort(intArray32, (int) ' ');
        int int37 = util8.findMinViaIteration(intArray13);
        util0.getNextPermutationNumber(intArray13);
        int int40 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) -1);
        java.lang.Class<?> wildcardClass41 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        util0.getNextPermutationNumber(intArray43);
        int int55 = util0.threeSumClosest(intArray43, 3);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        util57.getNextPermutationNumber(intArray82);
        int int87 = util56.threeSumClosest(intArray82, (int) (short) 0);
        int int89 = util56.findMinSubArrayLen(0, intArray62);
        int int90 = util0.findMinViaIteration(intArray62);
        java.lang.Class<?> wildcardClass91 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int int9 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 100);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util29.findKthLargestViaQuickSort(intArray53, (int) ' ');
        int int59 = util10.findKthLargestViaQuickSort(intArray53, (int) (short) -1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util60.removeDuplicateElements(intArray73);
        int int77 = util10.findMinViaIteration(intArray73);
        int int78 = util0.removeDuplicateElements(intArray73);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        util69.getNextPermutationNumber(intArray75);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int88 = util69.findKthLargestViaQuickSort(intArray84, (int) '#');
        int int89 = util49.removeDuplicateElements(intArray84);
        int int91 = util48.threeSumClosest(intArray84, (int) '#');
        int int92 = util41.findMinViaIteration(intArray84);
        int int94 = util0.findKthLargestViaQuickSort(intArray84, (int) (short) -1);
        int int95 = util0.findMinViaIteration(intArray64);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        int int40 = util0.removeDuplicateElements(intArray35);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        util41.getNextPermutationNumber(intArray66);
        util0.getNextPermutationNumber(intArray66);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        int int80 = util71.findMinViaIteration(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, 1, (short) 1 };
        int int88 = util82.findMinSubArrayLen((-1), intArray87);
        util82.getNextPermutationNumber(intArray87);
        int int91 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 100);
        int int93 = util0.threeSumClosest(intArray87, 2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        int int84 = util75.findMinViaIteration(intArray81);
        int int85 = util46.removeDuplicateElements(intArray81);
        int int87 = util0.findKthLargestViaQuickSort(intArray81, (int) (short) 100);
        java.lang.Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        int int29 = util0.findMinSubArrayLen((-1), intArray14);
        int int30 = util0.removeDuplicateElements(intArray26);
        int[] intArray31 = null;
        int int33 = util0.threeSumClosest(intArray31, (int) (short) 100);
        Util util34 = new Util();
        Util util35 = new Util();
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, 1, (short) 1 };
        int int42 = util36.findMinSubArrayLen((-1), intArray41);
        int int43 = util35.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        util45.getNextPermutationNumber(intArray51);
        int int54 = util35.findMinSubArrayLen(3, intArray51);
        int int55 = util34.findMinViaIteration(intArray51);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util34.removeDuplicateElements(intArray61);
        util0.getNextPermutationNumber(intArray61);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        int int38 = util29.findMinViaIteration(intArray35);
        int int39 = util0.removeDuplicateElements(intArray35);
        int int40 = util0.removeDuplicateElements(intArray14);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        int int68 = util49.findKthLargestViaQuickSort(intArray64, (int) '#');
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        util69.getNextPermutationNumber(intArray75);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int88 = util69.findKthLargestViaQuickSort(intArray84, (int) '#');
        int int89 = util49.removeDuplicateElements(intArray84);
        int int91 = util48.threeSumClosest(intArray84, (int) '#');
        int int92 = util41.findMinViaIteration(intArray84);
        int int93 = util41.threeSumClosest(intArray75, int88);
        util41.getNextPermutationNumber(intArray84);
        int int96 = util0.findKthLargestViaQuickSort(intArray84, (int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int int9 = util0.findMinSubArrayLen(10, intArray5);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util18.threeSumClosest(intArray42, 3);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util18.findKthLargestViaQuickSort(intArray52, 3);
        int int56 = util10.findMinViaIteration(intArray52);
        util10.getNextPermutationNumber(intArray15);
        int int58 = util0.removeDuplicateElements(intArray15);
        java.lang.Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int int37 = util0.removeDuplicateElements(intArray22);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        int[] intArray64 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int65 = util38.findMinSubArrayLen(10, intArray64);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util66.findMinSubArrayLen((int) '#', intArray80);
        int int85 = util38.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int87 = util0.threeSumClosest(intArray80, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray55 = null;
        util0.getNextPermutationNumber(intArray55);
        int int57 = util0.removeDuplicateElements(intArray14);
        java.lang.Class<?> wildcardClass58 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util47.findKthLargestViaQuickSort(intArray70, 5);
        int int77 = util0.findKthLargestViaQuickSort(intArray70, (-1));
        int int79 = util0.threeSumClosest(intArray22, (int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util44.findKthLargestViaQuickSort(intArray68, (int) ' ');
        int int74 = util0.findKthLargestViaQuickSort(intArray68, (int) 'a');
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        util0.getNextPermutationNumber(intArray80);
        java.lang.Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, 1, (short) 1 };
        int int34 = util28.findMinSubArrayLen((-1), intArray33);
        int int35 = util27.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int46 = util27.findMinSubArrayLen(3, intArray43);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util47.removeDuplicateElements(intArray60);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        int int83 = util47.findMinViaIteration(intArray69);
        int int85 = util27.findKthLargestViaQuickSort(intArray69, (int) '4');
        int int86 = util19.removeDuplicateElements(intArray69);
        int int87 = util0.removeDuplicateElements(intArray69);
        int int89 = util0.threeSumClosest(intArray43, (int) (byte) 100);
        java.lang.Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util50.findMinSubArrayLen((int) (byte) -1, intArray65);
        int int69 = util0.removeDuplicateElements(intArray65);
        java.lang.Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        int int42 = util0.findKthLargestViaQuickSort(intArray24, (int) (byte) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util43.findMinSubArrayLen(10, intArray48);
        int int54 = util0.threeSumClosest(intArray48, (int) (byte) 10);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        int int73 = util55.findKthLargestViaQuickSort(intArray69, (int) (byte) -1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int92 = util55.threeSumClosest(intArray87, 1);
        int int93 = util55.findMinSubArrayLen(int89, intArray79);
        int int94 = util0.findMinViaIteration(intArray79);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        util0.getNextPermutationNumber(intArray24);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util40.findMinSubArrayLen((int) '#', intArray54);
        util40.getNextPermutationNumber(intArray45);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util40.findKthLargestViaQuickSort(intArray64, (int) ' ');
        int int69 = util0.findMinSubArrayLen(3, intArray64);
        int[] intArray70 = null;
        int int71 = util0.removeDuplicateElements(intArray70);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int47 = util38.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray44);
        int[] intArray49 = null;
        int int50 = util0.removeDuplicateElements(intArray49);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int50 = util0.findMinViaIteration(intArray47);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        int int67 = util59.removeDuplicateElements(intArray65);
        int int69 = util51.findKthLargestViaQuickSort(intArray65, (int) (byte) -1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util70.removeDuplicateElements(intArray83);
        int int88 = util51.threeSumClosest(intArray83, 1);
        int int89 = util51.findMinSubArrayLen(int85, intArray75);
        int int90 = util0.findKthLargestViaQuickSort(intArray75, int49);
        int[] intArray91 = null;
        util0.getNextPermutationNumber(intArray91);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util28.findMinSubArrayLen((int) '#', intArray42);
        util28.getNextPermutationNumber(intArray33);
        int int48 = util28.findMinSubArrayLen(0, intArray42);
        int int49 = util0.removeDuplicateElements(intArray42);
        java.lang.Class<?> wildcardClass50 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        int int48 = util40.removeDuplicateElements(intArray46);
        int int50 = util32.findKthLargestViaQuickSort(intArray46, (int) (byte) -1);
        int[] intArray58 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int59 = util32.findMinSubArrayLen(10, intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util61.findMinSubArrayLen((int) '#', intArray75);
        util61.getNextPermutationNumber(intArray66);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        int int88 = util80.removeDuplicateElements(intArray86);
        util61.getNextPermutationNumber(intArray86);
        int int91 = util60.threeSumClosest(intArray86, (int) (short) 0);
        int int93 = util32.threeSumClosest(intArray86, 100);
        util0.getNextPermutationNumber(intArray86);
        java.lang.Class<?> wildcardClass95 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray28 = new int[] { 1, 1, (short) 1 };
        int int29 = util23.findMinSubArrayLen((-1), intArray28);
        int int30 = util22.removeDuplicateElements(intArray28);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, 1, (short) 1 };
        int int39 = util33.findMinSubArrayLen((-1), intArray38);
        util32.getNextPermutationNumber(intArray38);
        int int41 = util22.findMinSubArrayLen(3, intArray38);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, 1, (short) 1 };
        int int50 = util44.findMinSubArrayLen((-1), intArray49);
        util43.getNextPermutationNumber(intArray49);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, 1, (short) 1 };
        int int59 = util53.findMinSubArrayLen((-1), intArray58);
        util52.getNextPermutationNumber(intArray58);
        int int62 = util43.findKthLargestViaQuickSort(intArray58, (int) '#');
        int int63 = util22.findMinSubArrayLen((int) '#', intArray58);
        int int64 = util0.findMinSubArrayLen((int) ' ', intArray58);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util21.getNextPermutationNumber(intArray26);
        int[] intArray29 = null;
        int int30 = util21.removeDuplicateElements(intArray29);
        int int32 = util21.findKthLargestViaQuickSort(intArray26, (int) (short) 1);
        int int34 = util0.findKthLargestViaQuickSort(intArray26, (int) (short) 100);
        java.lang.Class<?> wildcardClass35 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        int int42 = util0.findKthLargestViaQuickSort(intArray24, (int) (byte) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util43.findMinSubArrayLen(10, intArray48);
        int int54 = util0.threeSumClosest(intArray48, (int) (byte) 10);
        int int55 = util0.findMinViaIteration(intArray24);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int64 = util56.removeDuplicateElements(intArray62);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        util66.getNextPermutationNumber(intArray72);
        int int75 = util56.findMinSubArrayLen(3, intArray72);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, (-1), (short) 10, 10 };
        int int83 = util76.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int93 = util76.findMinSubArrayLen((int) '#', intArray90);
        util76.getNextPermutationNumber(intArray81);
        int int96 = util76.findMinSubArrayLen(0, intArray90);
        util56.getNextPermutationNumber(intArray90);
        int int99 = util0.findKthLargestViaQuickSort(intArray90, 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util20.threeSumClosest(intArray44, 3);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util49.getNextPermutationNumber(intArray54);
        int int57 = util20.removeDuplicateElements(intArray54);
        int int58 = util0.removeDuplicateElements(intArray54);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        int int75 = util67.removeDuplicateElements(intArray73);
        int int77 = util59.findKthLargestViaQuickSort(intArray73, (int) (byte) -1);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, (-1), (short) 10, 10 };
        int int93 = util86.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util78.removeDuplicateElements(intArray91);
        int int96 = util59.threeSumClosest(intArray91, 1);
        util59.getNextPermutationNumber(intArray83);
        int int99 = util0.findKthLargestViaQuickSort(intArray83, 7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util18.findMinSubArrayLen((int) '#', intArray32);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        util46.getNextPermutationNumber(intArray52);
        int int55 = util36.findMinSubArrayLen(3, intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util56.removeDuplicateElements(intArray69);
        int int74 = util36.threeSumClosest(intArray69, (int) (short) 1);
        int int75 = util18.removeDuplicateElements(intArray69);
        int int77 = util18.threeSumClosest(intArray23, (int) (short) 1);
        int int79 = util0.threeSumClosest(intArray23, 3);
        int int81 = util0.threeSumClosest(intArray69, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util18.removeDuplicateElements(intArray31);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int int52 = util35.findMinSubArrayLen((int) '#', intArray49);
        util35.getNextPermutationNumber(intArray40);
        int int54 = util18.findMinViaIteration(intArray40);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int86 = util55.threeSumClosest(intArray81, (int) (short) 0);
        util18.getNextPermutationNumber(intArray81);
        int int88 = util0.findMinSubArrayLen((int) (byte) 100, intArray81);
        java.lang.Class<?> wildcardClass89 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util29.getNextPermutationNumber(intArray34);
        int int37 = util0.removeDuplicateElements(intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int55 = util0.removeDuplicateElements(intArray51);
        int[] intArray56 = null;
        int int57 = util0.removeDuplicateElements(intArray56);
        java.lang.Class<?> wildcardClass58 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        int int8 = util0.findKthLargestViaQuickSort(intArray5, 4);
        java.lang.Class<?> wildcardClass9 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util9.findKthLargestViaQuickSort(intArray33, (int) ' ');
        int[] intArray38 = null;
        int int39 = util9.findKthLargestViaQuickSort(intArray38, int35);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util40.findMinSubArrayLen((int) '#', intArray54);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util59.findMinSubArrayLen((int) '#', intArray73);
        util59.getNextPermutationNumber(intArray64);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        int int86 = util78.removeDuplicateElements(intArray84);
        util59.getNextPermutationNumber(intArray84);
        int int89 = util58.threeSumClosest(intArray84, (int) (short) 0);
        int int90 = util40.removeDuplicateElements(intArray84);
        util9.getNextPermutationNumber(intArray84);
        int int93 = util0.findKthLargestViaQuickSort(intArray84, 6);
        java.lang.Class<?> wildcardClass94 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        int int39 = util21.findKthLargestViaQuickSort(intArray35, (int) (byte) -1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util21.threeSumClosest(intArray45, 3);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int58 = util21.findKthLargestViaQuickSort(intArray55, 3);
        int int59 = util0.findMinSubArrayLen((int) (byte) 100, intArray55);
        java.lang.Class<?> wildcardClass60 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int57 = util20.threeSumClosest(intArray52, 1);
        util0.getNextPermutationNumber(intArray52);
        int int60 = util0.threeSumClosest(intArray52, 0);
        int int61 = util0.findMinViaIteration(intArray52);
        java.lang.Class<?> wildcardClass62 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util33.threeSumClosest(intArray57, 3);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int70 = util33.findKthLargestViaQuickSort(intArray67, 3);
        int int71 = util0.findMinSubArrayLen((int) 'a', intArray67);
        int[] intArray73 = null;
        int int74 = util0.findMinSubArrayLen((int) (short) -1, intArray73);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        int int49 = util0.findMinViaIteration(intArray34);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        int int68 = util50.findKthLargestViaQuickSort(intArray64, (int) (byte) -1);
        int[] intArray76 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int77 = util50.findMinSubArrayLen(10, intArray76);
        int int79 = util50.findKthLargestViaQuickSort(intArray64, (int) (short) -1);
        int int80 = util0.findMinViaIteration(intArray64);
        int int81 = util0.removeDuplicateElements(intArray44);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray80);
        int int90 = util0.findMinSubArrayLen((int) (byte) 10, intArray5);
        java.lang.Class<?> wildcardClass91 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        int int25 = util17.removeDuplicateElements(intArray23);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, 1, (short) 1 };
        int int34 = util28.findMinSubArrayLen((-1), intArray33);
        util27.getNextPermutationNumber(intArray33);
        int int36 = util17.findMinSubArrayLen(3, intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int53 = util37.removeDuplicateElements(intArray50);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int71 = util54.findMinSubArrayLen((int) '#', intArray68);
        util54.getNextPermutationNumber(intArray59);
        int int73 = util37.findMinViaIteration(intArray59);
        int int75 = util17.findKthLargestViaQuickSort(intArray59, (int) '4');
        util0.getNextPermutationNumber(intArray59);
        int int77 = util0.removeDuplicateElements(intArray33);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        int int86 = util78.removeDuplicateElements(intArray84);
        Util util88 = new Util();
        Util util89 = new Util();
        int[] intArray94 = new int[] { 1, 1, (short) 1 };
        int int95 = util89.findMinSubArrayLen((-1), intArray94);
        util88.getNextPermutationNumber(intArray94);
        int int97 = util78.findMinSubArrayLen(3, intArray94);
        int int98 = util0.removeDuplicateElements(intArray94);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util18.findMinSubArrayLen((int) '#', intArray32);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        util46.getNextPermutationNumber(intArray52);
        int int55 = util36.findMinSubArrayLen(3, intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util56.removeDuplicateElements(intArray69);
        int int74 = util36.threeSumClosest(intArray69, (int) (short) 1);
        int int75 = util18.removeDuplicateElements(intArray69);
        int int77 = util18.threeSumClosest(intArray23, (int) (short) 1);
        int int79 = util0.threeSumClosest(intArray23, 3);
        java.lang.Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int int29 = util0.findMinViaIteration(intArray5);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util30.findMinSubArrayLen((int) '#', intArray44);
        util30.getNextPermutationNumber(intArray35);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util30.threeSumClosest(intArray54, int56);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int93 = util77.removeDuplicateElements(intArray90);
        int int95 = util58.threeSumClosest(intArray90, 1);
        util30.getNextPermutationNumber(intArray90);
        int int97 = util0.findMinSubArrayLen(int28, intArray90);
        int int99 = util0.threeSumClosest(intArray63, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        util9.getNextPermutationNumber(intArray34);
        int int38 = util0.removeDuplicateElements(intArray34);
        int int40 = util0.findMinSubArrayLen((int) (short) -1, intArray14);
        java.lang.Class<?> wildcardClass41 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        int int68 = util0.removeDuplicateElements(intArray24);
        int int70 = util0.threeSumClosest(intArray24, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int[] intArray37 = null;
        util0.getNextPermutationNumber(intArray37);
        int[] intArray39 = null;
        util0.getNextPermutationNumber(intArray39);
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, (-1), (short) 10, 10 };
        int int49 = util42.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int59 = util42.findMinSubArrayLen((int) '#', intArray56);
        util42.getNextPermutationNumber(intArray47);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int69 = util61.removeDuplicateElements(intArray67);
        int int70 = util61.findMinViaIteration(intArray67);
        int int72 = util42.threeSumClosest(intArray67, (int) (byte) 0);
        int int74 = util42.findKthLargestViaQuickSort(intArray47, 1);
        int int75 = util0.findMinSubArrayLen((int) (short) 10, intArray47);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int[] intArray52 = null;
        int int53 = util0.threeSumClosest(intArray52, int51);
        java.lang.Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray80);
        Util util89 = new Util();
        int[] intArray94 = new int[] { 1, (-1), (short) 10, 10 };
        int int96 = util89.findKthLargestViaQuickSort(intArray94, (int) (byte) 1);
        int int97 = util0.removeDuplicateElements(intArray94);
        int int98 = util0.removeDuplicateElements(intArray60);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        int int29 = util0.removeDuplicateElements(intArray27);
        int[] intArray34 = new int[] { 100, (short) 0, (short) 10, (byte) 100 };
        int int35 = util0.findMinViaIteration(intArray34);
        java.lang.Class<?> wildcardClass36 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 0, 10, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int[] intArray27 = null;
        int int28 = util19.findMinViaIteration(intArray27);
        util19.getNextPermutationNumber(intArray24);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util30.getNextPermutationNumber(intArray35);
        int[] intArray38 = null;
        int int39 = util30.removeDuplicateElements(intArray38);
        int int41 = util30.findMinSubArrayLen(1, intArray35);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        util43.getNextPermutationNumber(intArray68);
        int int73 = util42.threeSumClosest(intArray68, (int) (short) 0);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, (-1), (short) 10, 10 };
        int int90 = util83.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int91 = util75.removeDuplicateElements(intArray88);
        int int92 = util42.findMinSubArrayLen(1, intArray88);
        int int94 = util42.findKthLargestViaQuickSort(intArray57, (int) (byte) 100);
        int int96 = util30.threeSumClosest(intArray57, 1);
        int int97 = util19.findMinViaIteration(intArray57);
        int int99 = util0.threeSumClosest(intArray57, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util51.getNextPermutationNumber(intArray57);
        int int60 = util41.findMinSubArrayLen(3, intArray57);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        int int81 = util62.findKthLargestViaQuickSort(intArray77, (int) '#');
        int int82 = util41.findMinSubArrayLen((int) '#', intArray77);
        int int83 = util0.removeDuplicateElements(intArray77);
        int int85 = util0.findMinSubArrayLen((int) (byte) 100, intArray5);
        java.lang.Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util33.removeDuplicateElements(intArray46);
        int int50 = util0.findMinSubArrayLen(1, intArray46);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        int int67 = util59.removeDuplicateElements(intArray65);
        int int69 = util51.findKthLargestViaQuickSort(intArray65, (int) (byte) -1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util51.threeSumClosest(intArray75, 3);
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        int int88 = util51.findKthLargestViaQuickSort(intArray85, 3);
        int int90 = util51.findKthLargestViaQuickSort(intArray75, 5);
        int int92 = util0.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int94 = util0.threeSumClosest(intArray38, 5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util28.findMinSubArrayLen((int) (byte) -1, intArray43);
        int int48 = util0.threeSumClosest(intArray43, (int) (short) 100);
        java.lang.Class<?> wildcardClass49 = intArray43.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        int[] intArray51 = null;
        util0.getNextPermutationNumber(intArray51);
        int int53 = util0.removeDuplicateElements(intArray44);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, 1, (short) 1 };
        int int61 = util55.findMinSubArrayLen((-1), intArray60);
        int int62 = util54.removeDuplicateElements(intArray60);
        int int63 = util54.findMinViaIteration(intArray60);
        int int64 = util0.findMinViaIteration(intArray60);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int int9 = util0.findMinSubArrayLen(10, intArray5);
        Util util10 = new Util();
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        int int19 = util11.removeDuplicateElements(intArray17);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        int int30 = util11.findMinSubArrayLen(3, intArray27);
        int int31 = util10.findMinViaIteration(intArray27);
        util0.getNextPermutationNumber(intArray27);
        java.lang.Class<?> wildcardClass33 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int int37 = util0.removeDuplicateElements(intArray22);
        int int39 = util0.findKthLargestViaQuickSort(intArray31, (int) '#');
        java.lang.Class<?> wildcardClass40 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        util39.getNextPermutationNumber(intArray64);
        int int69 = util38.threeSumClosest(intArray64, (int) (short) 0);
        int int70 = util20.removeDuplicateElements(intArray64);
        int[] intArray71 = null;
        int int73 = util20.findKthLargestViaQuickSort(intArray71, 0);
        int int74 = util20.findMinViaIteration(intArray25);
        int int75 = util0.findMinSubArrayLen(2, intArray25);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        int[] intArray51 = null;
        util0.getNextPermutationNumber(intArray51);
        int int53 = util0.removeDuplicateElements(intArray44);
        java.lang.Class<?> wildcardClass54 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray55 = null;
        util0.getNextPermutationNumber(intArray55);
        int[] intArray57 = null;
        int int58 = util0.threeSumClosest(intArray57, int16);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        util52.getNextPermutationNumber(intArray57);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util71.removeDuplicateElements(intArray77);
        util52.getNextPermutationNumber(intArray77);
        int int82 = util51.threeSumClosest(intArray77, (int) (short) 0);
        int int84 = util51.findMinSubArrayLen(0, intArray57);
        int int85 = util0.findMinSubArrayLen((int) (byte) 0, intArray57);
        int int86 = util0.findKthLargestViaQuickSort(intArray24, int15);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util21.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util39.getNextPermutationNumber(intArray44);
        int int48 = util21.threeSumClosest(intArray44, (int) 'a');
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int67 = util49.findKthLargestViaQuickSort(intArray63, (int) (byte) -1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util49.threeSumClosest(intArray73, 3);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int86 = util49.findKthLargestViaQuickSort(intArray83, 3);
        int int87 = util21.findMinViaIteration(intArray83);
        int int89 = util0.threeSumClosest(intArray83, (int) 'a');
        util0.getNextPermutationNumber(intArray26);
        java.lang.Class<?> wildcardClass91 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        int int87 = util0.findKthLargestViaQuickSort(intArray83, (int) '4');
        int int89 = util0.threeSumClosest(intArray60, 6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        int int39 = util21.findKthLargestViaQuickSort(intArray35, (int) (byte) -1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util21.threeSumClosest(intArray45, 3);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        util52.getNextPermutationNumber(intArray57);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util71.removeDuplicateElements(intArray77);
        util52.getNextPermutationNumber(intArray77);
        int int82 = util51.threeSumClosest(intArray77, (int) (short) 0);
        int int83 = util21.findMinSubArrayLen((int) 'a', intArray77);
        int int84 = util0.removeDuplicateElements(intArray77);
        int[] intArray85 = null;
        int int87 = util0.findKthLargestViaQuickSort(intArray85, 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        int int47 = util29.findKthLargestViaQuickSort(intArray43, (int) (byte) -1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util29.threeSumClosest(intArray53, 3);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util58.getNextPermutationNumber(intArray63);
        int int66 = util29.removeDuplicateElements(intArray63);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util67.removeDuplicateElements(intArray80);
        int int84 = util29.removeDuplicateElements(intArray80);
        int int85 = util0.findMinSubArrayLen((int) (short) 10, intArray80);
        java.lang.Class<?> wildcardClass86 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        int int39 = util21.findKthLargestViaQuickSort(intArray35, (int) (byte) -1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util21.threeSumClosest(intArray45, 3);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        util52.getNextPermutationNumber(intArray57);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util71.removeDuplicateElements(intArray77);
        util52.getNextPermutationNumber(intArray77);
        int int82 = util51.threeSumClosest(intArray77, (int) (short) 0);
        int int83 = util21.findMinSubArrayLen((int) 'a', intArray77);
        int int84 = util0.removeDuplicateElements(intArray77);
        java.lang.Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        int int86 = util68.findKthLargestViaQuickSort(intArray82, (int) (byte) -1);
        int[] intArray94 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int95 = util68.findMinSubArrayLen(10, intArray94);
        int int96 = util0.findMinViaIteration(intArray94);
        int[] intArray97 = null;
        int int99 = util0.threeSumClosest(intArray97, 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int[] intArray37 = null;
        util0.getNextPermutationNumber(intArray37);
        int[] intArray39 = null;
        util0.getNextPermutationNumber(intArray39);
        int int41 = util0.threeSumClosest(intArray13, int34);
        java.lang.Class<?> wildcardClass42 = intArray13.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        int int41 = util0.findMinSubArrayLen(7, intArray24);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        int int86 = util68.findKthLargestViaQuickSort(intArray82, (int) (byte) -1);
        int[] intArray94 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int95 = util68.findMinSubArrayLen(10, intArray94);
        int int96 = util0.findMinViaIteration(intArray94);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int55 = util46.findMinViaIteration(intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, 1, (short) 1 };
        int int71 = util65.findMinSubArrayLen((-1), intArray70);
        int int72 = util64.removeDuplicateElements(intArray70);
        int int74 = util56.findKthLargestViaQuickSort(intArray70, (int) (byte) -1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int84 = util56.threeSumClosest(intArray80, 3);
        util46.getNextPermutationNumber(intArray80);
        util0.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray70);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, 1, (short) 1 };
        int int47 = util41.findMinSubArrayLen((-1), intArray46);
        util40.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util49.getNextPermutationNumber(intArray55);
        int int59 = util40.findKthLargestViaQuickSort(intArray55, (int) '#');
        int int60 = util20.removeDuplicateElements(intArray55);
        int int62 = util19.threeSumClosest(intArray55, (int) '#');
        util0.getNextPermutationNumber(intArray55);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        int int84 = util64.findMinSubArrayLen(0, intArray78);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, 1, (short) 1 };
        int int91 = util85.findMinSubArrayLen((-1), intArray90);
        util85.getNextPermutationNumber(intArray90);
        int[] intArray93 = null;
        int int94 = util85.removeDuplicateElements(intArray93);
        int int96 = util85.findKthLargestViaQuickSort(intArray90, (int) (short) 1);
        int int98 = util64.findKthLargestViaQuickSort(intArray90, (int) (short) 100);
        int int99 = util0.removeDuplicateElements(intArray90);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 3 + "'", int99 == 3);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int57 = util20.threeSumClosest(intArray52, 1);
        util0.getNextPermutationNumber(intArray52);
        int int60 = util0.findMinSubArrayLen(10, intArray52);
        int[] intArray61 = null;
        int int62 = util0.removeDuplicateElements(intArray61);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util28.findMinSubArrayLen((int) '#', intArray42);
        util28.getNextPermutationNumber(intArray33);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        int int55 = util47.removeDuplicateElements(intArray53);
        util28.getNextPermutationNumber(intArray53);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util28.removeDuplicateElements(intArray63);
        int int68 = util28.removeDuplicateElements(intArray42);
        int int70 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int[] intArray37 = null;
        util0.getNextPermutationNumber(intArray37);
        int[] intArray39 = null;
        util0.getNextPermutationNumber(intArray39);
        int[] intArray42 = null;
        int int43 = util0.findMinSubArrayLen(100, intArray42);
        java.lang.Class<?> wildcardClass44 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util56.removeDuplicateElements(intArray69);
        int int74 = util37.threeSumClosest(intArray69, 1);
        int int75 = util37.findMinSubArrayLen(int71, intArray61);
        int int77 = util0.findKthLargestViaQuickSort(intArray61, 5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray22 = new int[] { 5, 4, 'a' };
        int int23 = util0.removeDuplicateElements(intArray22);
        Util util25 = new Util();
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, 1, (short) 1 };
        int int32 = util26.findMinSubArrayLen((-1), intArray31);
        util25.getNextPermutationNumber(intArray31);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        util34.getNextPermutationNumber(intArray59);
        int int63 = util25.removeDuplicateElements(intArray59);
        int int64 = util0.findMinSubArrayLen((int) 'a', intArray59);
        java.lang.Class<?> wildcardClass65 = intArray59.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        util20.getNextPermutationNumber(intArray45);
        int int49 = util0.findMinSubArrayLen((int) ' ', intArray45);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        int int71 = util0.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        java.lang.Class<?> wildcardClass68 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int69 = util0.findKthLargestViaQuickSort(intArray65, 0);
        util0.getNextPermutationNumber(intArray65);
        int[] intArray71 = null;
        int int72 = util0.findMinViaIteration(intArray71);
        int[] intArray74 = null;
        int int75 = util0.findMinSubArrayLen(5, intArray74);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen(0, intArray53);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        util65.getNextPermutationNumber(intArray71);
        int int74 = util55.findMinSubArrayLen(3, intArray71);
        int int75 = util0.removeDuplicateElements(intArray71);
        java.lang.Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        int int47 = util0.findMinSubArrayLen((int) (byte) 1, intArray29);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util57.findMinSubArrayLen((int) '#', intArray71);
        util57.getNextPermutationNumber(intArray62);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, 1, (short) 1 };
        int int83 = util77.findMinSubArrayLen((-1), intArray82);
        int int84 = util76.removeDuplicateElements(intArray82);
        util57.getNextPermutationNumber(intArray82);
        int int86 = util48.removeDuplicateElements(intArray82);
        int int88 = util48.findMinSubArrayLen((int) (short) -1, intArray62);
        int int89 = util0.removeDuplicateElements(intArray62);
        int[] intArray90 = null;
        int int92 = util0.threeSumClosest(intArray90, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        int int77 = util68.findMinViaIteration(intArray74);
        int int78 = util68.removeDuplicateElements(intArray74);
        int int80 = util0.findKthLargestViaQuickSort(intArray74, 100);
        java.lang.Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        util19.getNextPermutationNumber(intArray25);
        int int29 = util10.findKthLargestViaQuickSort(intArray25, (int) '#');
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int49 = util30.findKthLargestViaQuickSort(intArray45, (int) '#');
        int int50 = util10.removeDuplicateElements(intArray45);
        int int52 = util9.threeSumClosest(intArray45, (int) '#');
        int int53 = util9.threeSumClosest(intArray16, int50);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        int int72 = util54.findKthLargestViaQuickSort(intArray68, (int) (byte) -1);
        int[] intArray80 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int81 = util54.findMinSubArrayLen(10, intArray80);
        int int83 = util54.findKthLargestViaQuickSort(intArray68, (int) (short) -1);
        int int85 = util9.threeSumClosest(intArray68, 100);
        int int86 = util0.threeSumClosest(intArray68, int17);
        java.lang.Class<?> wildcardClass87 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        int int10 = util1.findMinViaIteration(intArray7);
        int int11 = util0.findMinViaIteration(intArray7);
        int int12 = util0.removeDuplicateElements(intArray7);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        int[] intArray50 = null;
        int int51 = util0.removeDuplicateElements(intArray50);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, (-1), (short) 10, 10 };
        int int23 = util16.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        int int24 = util7.findMinSubArrayLen((int) '#', intArray21);
        util7.getNextPermutationNumber(intArray12);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util26.findMinSubArrayLen((int) '#', intArray40);
        util26.getNextPermutationNumber(intArray31);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util26.findKthLargestViaQuickSort(intArray50, (int) ' ');
        int int56 = util7.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int57 = util0.findMinViaIteration(intArray50);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util58.getNextPermutationNumber(intArray64);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, (-1), (short) 10, 10 };
        int int83 = util76.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int84 = util67.findMinSubArrayLen((int) '#', intArray81);
        util67.getNextPermutationNumber(intArray72);
        Util util86 = new Util();
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        int int94 = util86.removeDuplicateElements(intArray92);
        util67.getNextPermutationNumber(intArray92);
        int int96 = util58.removeDuplicateElements(intArray92);
        int int98 = util0.threeSumClosest(intArray92, 10);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int79 = util0.findMinViaIteration(intArray51);
        java.lang.Class<?> wildcardClass80 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        int int88 = util0.findMinViaIteration(intArray24);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        util0.getNextPermutationNumber(intArray44);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int57 = util49.removeDuplicateElements(intArray55);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int68 = util49.findMinSubArrayLen(3, intArray65);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        util70.getNextPermutationNumber(intArray76);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        util79.getNextPermutationNumber(intArray85);
        int int89 = util70.findKthLargestViaQuickSort(intArray85, (int) '#');
        int int90 = util49.findMinSubArrayLen((int) '#', intArray85);
        int int91 = util49.removeDuplicateElements(intArray55);
        int int93 = util0.threeSumClosest(intArray55, 100);
        java.lang.Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int int44 = util0.threeSumClosest(intArray7, int41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        int int63 = util45.findKthLargestViaQuickSort(intArray59, (int) (byte) -1);
        int[] intArray71 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int72 = util45.findMinSubArrayLen(10, intArray71);
        int int74 = util45.findKthLargestViaQuickSort(intArray59, (int) (short) -1);
        int int76 = util0.threeSumClosest(intArray59, 100);
        java.lang.Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util21.getNextPermutationNumber(intArray26);
        int[] intArray29 = null;
        int int30 = util21.removeDuplicateElements(intArray29);
        int int32 = util21.findKthLargestViaQuickSort(intArray26, (int) (short) 1);
        int int34 = util0.findKthLargestViaQuickSort(intArray26, (int) (short) 100);
        int int36 = util0.threeSumClosest(intArray26, 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        int[] intArray63 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int64 = util37.findMinSubArrayLen(10, intArray63);
        int int66 = util37.findMinSubArrayLen((-1), intArray51);
        int int67 = util37.removeDuplicateElements(intArray63);
        int int69 = util0.threeSumClosest(intArray63, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        int int69 = util0.findKthLargestViaQuickSort(intArray65, 0);
        int int71 = util0.findKthLargestViaQuickSort(intArray42, (int) ' ');
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, 1, (short) 1 };
        int int79 = util73.findMinSubArrayLen((-1), intArray78);
        util72.getNextPermutationNumber(intArray78);
        int int82 = util0.threeSumClosest(intArray78, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        util42.getNextPermutationNumber(intArray47);
        int[] intArray50 = null;
        int int51 = util42.removeDuplicateElements(intArray50);
        int int53 = util42.findKthLargestViaQuickSort(intArray47, (int) (short) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray47, (int) (short) -1);
        int int57 = util0.findMinSubArrayLen((int) '4', intArray36);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        int int38 = util20.findKthLargestViaQuickSort(intArray34, (int) (byte) -1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int57 = util20.threeSumClosest(intArray52, 1);
        util0.getNextPermutationNumber(intArray52);
        int int60 = util0.findMinSubArrayLen(10, intArray52);
        java.lang.Class<?> wildcardClass61 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        int int57 = util0.findMinSubArrayLen(2, intArray53);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util58.getNextPermutationNumber(intArray63);
        int[] intArray66 = null;
        int int67 = util58.removeDuplicateElements(intArray66);
        int int69 = util58.findKthLargestViaQuickSort(intArray63, (int) (short) 1);
        int int71 = util0.findKthLargestViaQuickSort(intArray63, 0);
        java.lang.Class<?> wildcardClass72 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int[] intArray52 = null;
        int int53 = util0.threeSumClosest(intArray52, int51);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        int int73 = util0.findMinSubArrayLen((int) (byte) 10, intArray69);
        java.lang.Class<?> wildcardClass74 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        int int8 = util0.findKthLargestViaQuickSort(intArray5, 4);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        int int17 = util9.removeDuplicateElements(intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        util19.getNextPermutationNumber(intArray25);
        int int28 = util9.findMinSubArrayLen(3, intArray25);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int49 = util30.findKthLargestViaQuickSort(intArray45, (int) '#');
        int int50 = util9.findMinSubArrayLen((int) '#', intArray45);
        int int51 = util9.removeDuplicateElements(intArray15);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        int int70 = util52.findKthLargestViaQuickSort(intArray66, (int) (byte) -1);
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, (-1), (short) 10, 10 };
        int int78 = util71.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util52.threeSumClosest(intArray76, 3);
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        util81.getNextPermutationNumber(intArray86);
        int int89 = util52.removeDuplicateElements(intArray86);
        int int90 = util9.findMinViaIteration(intArray86);
        int int92 = util0.threeSumClosest(intArray86, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, (-1), (short) 10, 10 };
        int int70 = util63.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util44.findKthLargestViaQuickSort(intArray68, (int) ' ');
        int int74 = util0.findKthLargestViaQuickSort(intArray68, (int) 'a');
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        util0.getNextPermutationNumber(intArray80);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, 1, (short) 1 };
        int int89 = util83.findMinSubArrayLen((-1), intArray88);
        util83.getNextPermutationNumber(intArray88);
        int int92 = util83.findKthLargestViaQuickSort(intArray88, (int) (byte) 100);
        int int94 = util0.findKthLargestViaQuickSort(intArray88, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int[] intArray8 = null;
        int int9 = util0.findMinViaIteration(intArray8);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, 1, (short) 1 };
        int int33 = util27.findMinSubArrayLen((-1), intArray32);
        int int34 = util26.removeDuplicateElements(intArray32);
        int int36 = util18.findKthLargestViaQuickSort(intArray32, (int) (byte) -1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util18.threeSumClosest(intArray42, 3);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util18.findKthLargestViaQuickSort(intArray52, 3);
        int int56 = util10.findMinViaIteration(intArray52);
        util10.getNextPermutationNumber(intArray15);
        util0.getNextPermutationNumber(intArray15);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int67 = util59.findKthLargestViaQuickSort(intArray64, 4);
        int int68 = util0.findKthLargestViaQuickSort(intArray64, int9);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.threeSumClosest(intArray34, 10);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util58.removeDuplicateElements(intArray71);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, (-1), (short) 10, 10 };
        int int91 = util84.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int92 = util75.findMinSubArrayLen((int) '#', intArray89);
        util75.getNextPermutationNumber(intArray80);
        int int94 = util58.findMinViaIteration(intArray80);
        int int95 = util38.findMinSubArrayLen(0, intArray80);
        int int97 = util0.findKthLargestViaQuickSort(intArray80, 100);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util29.removeDuplicateElements(intArray42);
        int int47 = util10.threeSumClosest(intArray42, 1);
        util10.getNextPermutationNumber(intArray34);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, (-1), (short) 10, 10 };
        int int76 = util69.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int78 = util50.findKthLargestViaQuickSort(intArray74, (int) ' ');
        int int79 = util10.findMinSubArrayLen(3, intArray74);
        int int80 = util0.findMinSubArrayLen(int6, intArray74);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util9.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util26.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        int int62 = util26.findMinViaIteration(intArray48);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, 1, (short) 1 };
        int int90 = util84.findMinSubArrayLen((-1), intArray89);
        int int91 = util83.removeDuplicateElements(intArray89);
        util64.getNextPermutationNumber(intArray89);
        int int94 = util63.threeSumClosest(intArray89, (int) (short) 0);
        util26.getNextPermutationNumber(intArray89);
        int int96 = util9.findMinViaIteration(intArray89);
        util0.getNextPermutationNumber(intArray89);
        util0.getNextPermutationNumber(intArray69);
        java.lang.Class<?> wildcardClass99 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        int int39 = util21.findKthLargestViaQuickSort(intArray35, (int) (byte) -1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util21.threeSumClosest(intArray45, 3);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int58 = util21.findKthLargestViaQuickSort(intArray55, 3);
        int int59 = util0.findMinSubArrayLen((int) (byte) 100, intArray55);
        int int61 = util0.findKthLargestViaQuickSort(intArray35, (int) (short) 100);
        java.lang.Class<?> wildcardClass62 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        int int56 = util38.findKthLargestViaQuickSort(intArray52, (int) (byte) -1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util57.removeDuplicateElements(intArray70);
        int int75 = util38.threeSumClosest(intArray70, 1);
        util38.getNextPermutationNumber(intArray62);
        int int78 = util0.findKthLargestViaQuickSort(intArray62, (int) (short) -1);
        java.lang.Class<?> wildcardClass79 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util10.findMinSubArrayLen((int) '#', intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        util29.getNextPermutationNumber(intArray54);
        int int59 = util28.threeSumClosest(intArray54, (int) (short) 0);
        int int60 = util10.removeDuplicateElements(intArray54);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, (-1), (short) 10, 10 };
        int int77 = util70.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util61.findMinSubArrayLen((int) '#', intArray75);
        util61.getNextPermutationNumber(intArray66);
        int int80 = util10.findMinViaIteration(intArray66);
        int int82 = util10.findMinSubArrayLen(1, intArray66);
        int int84 = util0.findKthLargestViaQuickSort(intArray66, 5);
        int int85 = util0.removeDuplicateElements(intArray66);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findMinSubArrayLen((int) (byte) 100, intArray33);
        int int54 = util0.findKthLargestViaQuickSort(intArray33, 1);
        java.lang.Class<?> wildcardClass55 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        int int86 = util0.threeSumClosest(intArray25, (int) (short) 100);
        int[] intArray87 = null;
        util0.getNextPermutationNumber(intArray87);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int[] intArray37 = null;
        util0.getNextPermutationNumber(intArray37);
        int[] intArray39 = null;
        util0.getNextPermutationNumber(intArray39);
        int[] intArray42 = null;
        int int43 = util0.findMinSubArrayLen(100, intArray42);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        int int63 = util45.findKthLargestViaQuickSort(intArray59, (int) (byte) -1);
        int int64 = util45.removeDuplicateElements(intArray59);
        int int65 = util0.findMinSubArrayLen((int) (short) 10, intArray59);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, 1, (short) 1 };
        int int90 = util84.findMinSubArrayLen((-1), intArray89);
        int int91 = util83.removeDuplicateElements(intArray89);
        util64.getNextPermutationNumber(intArray89);
        int int94 = util63.threeSumClosest(intArray89, (int) (short) 0);
        int int95 = util45.removeDuplicateElements(intArray89);
        int int96 = util0.findMinSubArrayLen((int) (byte) 1, intArray89);
        java.lang.Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int51 = util0.removeDuplicateElements(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        int int48 = util20.findKthLargestViaQuickSort(intArray43, 5);
        int int49 = util0.removeDuplicateElements(intArray43);
        Util util50 = new Util();
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        util61.getNextPermutationNumber(intArray67);
        int int70 = util51.findMinSubArrayLen(3, intArray67);
        int int71 = util50.findMinViaIteration(intArray67);
        util0.getNextPermutationNumber(intArray67);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen(0, intArray53);
        int int56 = util0.threeSumClosest(intArray23, 3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        int int11 = util0.findMinSubArrayLen(1, intArray5);
        Util util12 = new Util();
        Util util13 = new Util();
        int[] intArray18 = new int[] { 1, (-1), (short) 10, 10 };
        int int20 = util13.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int int30 = util13.findMinSubArrayLen((int) '#', intArray27);
        util13.getNextPermutationNumber(intArray18);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, 1, (short) 1 };
        int int39 = util33.findMinSubArrayLen((-1), intArray38);
        int int40 = util32.removeDuplicateElements(intArray38);
        util13.getNextPermutationNumber(intArray38);
        int int43 = util12.threeSumClosest(intArray38, (int) (short) 0);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util45.removeDuplicateElements(intArray58);
        int int62 = util12.findMinSubArrayLen(1, intArray58);
        int int64 = util12.findKthLargestViaQuickSort(intArray27, (int) (byte) 100);
        int int66 = util0.threeSumClosest(intArray27, 1);
        int int67 = util0.removeDuplicateElements(intArray38);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        util0.getNextPermutationNumber(intArray44);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util50.getNextPermutationNumber(intArray75);
        int int80 = util49.threeSumClosest(intArray75, (int) (short) 0);
        int int81 = util0.removeDuplicateElements(intArray75);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        util8.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        Util util23 = new Util();
        int[] intArray28 = new int[] { 1, (-1), (short) 10, 10 };
        int int30 = util23.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, 1, (short) 1 };
        int int38 = util32.findMinSubArrayLen((-1), intArray37);
        int int39 = util31.removeDuplicateElements(intArray37);
        int int41 = util23.findKthLargestViaQuickSort(intArray37, (int) (byte) -1);
        int[] intArray49 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int50 = util23.findMinSubArrayLen(10, intArray49);
        int int51 = util16.removeDuplicateElements(intArray49);
        int int53 = util8.threeSumClosest(intArray49, (int) 'a');
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        util55.getNextPermutationNumber(intArray61);
        int int64 = util55.findMinViaIteration(intArray61);
        int int65 = util8.findMinSubArrayLen((int) '4', intArray61);
        int int66 = util0.findMinSubArrayLen(2, intArray61);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        java.lang.Class<?> wildcardClass44 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        java.lang.Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        java.lang.Class<?> wildcardClass39 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        int int67 = util59.removeDuplicateElements(intArray65);
        int int69 = util51.findKthLargestViaQuickSort(intArray65, (int) (byte) -1);
        int[] intArray73 = new int[] { 5, 4, 'a' };
        int int74 = util51.removeDuplicateElements(intArray73);
        util51.getNextPermutationNumber(intArray65);
        int int77 = util0.threeSumClosest(intArray65, (int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int18 = util9.findMinSubArrayLen(10, intArray14);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int39 = util20.findMinSubArrayLen(3, intArray36);
        int int40 = util19.findMinViaIteration(intArray36);
        util9.getNextPermutationNumber(intArray36);
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, (-1), (short) 10, 10 };
        int int49 = util42.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int59 = util42.findMinSubArrayLen((int) '#', intArray56);
        util42.getNextPermutationNumber(intArray47);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int69 = util61.removeDuplicateElements(intArray67);
        util42.getNextPermutationNumber(intArray67);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util71.getNextPermutationNumber(intArray77);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        util80.getNextPermutationNumber(intArray86);
        int int90 = util71.findKthLargestViaQuickSort(intArray86, (int) '#');
        int int92 = util42.threeSumClosest(intArray86, (int) (short) 100);
        int int94 = util9.threeSumClosest(intArray86, (int) (byte) 1);
        int int96 = util0.findKthLargestViaQuickSort(intArray86, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int28 = util0.threeSumClosest(intArray25, 6);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        Util util36 = new Util();
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        util46.getNextPermutationNumber(intArray52);
        int int56 = util37.findKthLargestViaQuickSort(intArray52, (int) '#');
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util57.getNextPermutationNumber(intArray63);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        util66.getNextPermutationNumber(intArray72);
        int int76 = util57.findKthLargestViaQuickSort(intArray72, (int) '#');
        int int77 = util37.removeDuplicateElements(intArray72);
        int int79 = util36.threeSumClosest(intArray72, (int) '#');
        int int80 = util29.findMinViaIteration(intArray72);
        int int81 = util29.threeSumClosest(intArray63, int76);
        util29.getNextPermutationNumber(intArray72);
        int int84 = util0.findKthLargestViaQuickSort(intArray72, 0);
        Util util85 = new Util();
        int[] intArray90 = new int[] { 1, (-1), (short) 10, 10 };
        int int92 = util85.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util0.findKthLargestViaQuickSort(intArray90, (int) (byte) 0);
        java.lang.Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        util0.getNextPermutationNumber(intArray43);
        int int55 = util0.threeSumClosest(intArray43, 3);
        int[] intArray56 = null;
        int int58 = util0.findKthLargestViaQuickSort(intArray56, 0);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        util59.getNextPermutationNumber(intArray64);
        int[] intArray67 = null;
        int int68 = util59.removeDuplicateElements(intArray67);
        int int70 = util59.findKthLargestViaQuickSort(intArray64, (int) (short) 1);
        int int71 = util0.threeSumClosest(intArray64, int52);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util47.findKthLargestViaQuickSort(intArray70, 5);
        int int77 = util0.findKthLargestViaQuickSort(intArray70, (-1));
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        util0.getNextPermutationNumber(intArray84);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        util0.getNextPermutationNumber(intArray43);
        int int55 = util0.threeSumClosest(intArray43, 3);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int85 = util0.threeSumClosest(intArray81, int82);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util18.getNextPermutationNumber(intArray23);
        int int27 = util0.threeSumClosest(intArray23, (int) 'a');
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        int int65 = util28.findKthLargestViaQuickSort(intArray62, 3);
        int int66 = util0.findMinViaIteration(intArray62);
        int[] intArray67 = null;
        int int68 = util0.threeSumClosest(intArray67, int24);
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, (-1), (short) 10, 10 };
        int int76 = util69.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        int int87 = util69.findKthLargestViaQuickSort(intArray83, (int) (byte) -1);
        int[] intArray95 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int96 = util69.findMinSubArrayLen(10, intArray95);
        int int97 = util0.removeDuplicateElements(intArray95);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 7 + "'", int97 == 7);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findKthLargestViaQuickSort(intArray5, (int) 'a');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int55 = util47.findKthLargestViaQuickSort(intArray52, 4);
        int int56 = util0.removeDuplicateElements(intArray52);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util8.findMinSubArrayLen((int) '#', intArray22);
        util8.getNextPermutationNumber(intArray13);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.findKthLargestViaQuickSort(intArray32, (int) ' ');
        int int37 = util8.findMinViaIteration(intArray13);
        util0.getNextPermutationNumber(intArray13);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util48.findMinSubArrayLen((int) '#', intArray62);
        util48.getNextPermutationNumber(intArray53);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        int int75 = util67.removeDuplicateElements(intArray73);
        util48.getNextPermutationNumber(intArray73);
        int int77 = util39.removeDuplicateElements(intArray73);
        int int78 = util0.removeDuplicateElements(intArray73);
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, (-1), (short) 10, 10 };
        int int86 = util79.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray87 = null;
        int int88 = util79.findMinViaIteration(intArray87);
        util79.getNextPermutationNumber(intArray84);
        int int90 = util0.findMinViaIteration(intArray84);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util8.findMinSubArrayLen((int) (byte) -1, intArray23);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util27.findMinSubArrayLen((int) '#', intArray41);
        util27.getNextPermutationNumber(intArray32);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util27.threeSumClosest(intArray51, int53);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        int int73 = util55.findKthLargestViaQuickSort(intArray69, (int) (byte) -1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int92 = util55.threeSumClosest(intArray87, 1);
        util27.getNextPermutationNumber(intArray87);
        int int95 = util8.findKthLargestViaQuickSort(intArray87, (int) 'a');
        util0.getNextPermutationNumber(intArray87);
        java.lang.Class<?> wildcardClass97 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        util0.getNextPermutationNumber(intArray79);
        java.lang.Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        util41.getNextPermutationNumber(intArray66);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        int int78 = util70.removeDuplicateElements(intArray76);
        int int79 = util70.findMinViaIteration(intArray76);
        int int80 = util41.removeDuplicateElements(intArray76);
        int int81 = util41.removeDuplicateElements(intArray55);
        util0.getNextPermutationNumber(intArray55);
        java.lang.Class<?> wildcardClass83 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        int[] intArray26 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int27 = util0.findMinSubArrayLen(10, intArray26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        int int46 = util28.findKthLargestViaQuickSort(intArray42, (int) (byte) -1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util28.threeSumClosest(intArray52, 3);
        int int58 = util0.findKthLargestViaQuickSort(intArray52, (int) 'a');
        int int59 = util0.removeDuplicateElements(intArray26);
        int int60 = util0.findMinViaIteration(intArray33);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util21.getNextPermutationNumber(intArray26);
        int[] intArray29 = null;
        int int30 = util21.removeDuplicateElements(intArray29);
        int int32 = util21.findKthLargestViaQuickSort(intArray26, (int) (short) 1);
        int int34 = util0.findKthLargestViaQuickSort(intArray26, (int) (short) 100);
        int int36 = util0.threeSumClosest(intArray26, 1);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util38.findMinSubArrayLen((int) '#', intArray52);
        util38.getNextPermutationNumber(intArray43);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util58.findMinSubArrayLen((int) '#', intArray72);
        util58.getNextPermutationNumber(intArray63);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        util58.getNextPermutationNumber(intArray83);
        int int87 = util38.findMinSubArrayLen((int) ' ', intArray83);
        int int89 = util37.findKthLargestViaQuickSort(intArray83, (int) (byte) 0);
        int int91 = util0.threeSumClosest(intArray83, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        int int47 = util39.removeDuplicateElements(intArray45);
        util20.getNextPermutationNumber(intArray45);
        int int49 = util0.findMinSubArrayLen((int) ' ', intArray45);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        int int53 = util0.threeSumClosest(intArray5, 7);
        java.lang.Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        int int21 = util0.findKthLargestViaQuickSort(intArray6, 1);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        int int40 = util22.findKthLargestViaQuickSort(intArray36, (int) (byte) -1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util41.findKthLargestViaQuickSort(intArray65, (int) ' ');
        int int71 = util22.findKthLargestViaQuickSort(intArray65, (int) (short) -1);
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, 1, (short) 1 };
        int int79 = util73.findMinSubArrayLen((-1), intArray78);
        int int80 = util72.removeDuplicateElements(intArray78);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util72.findMinSubArrayLen((int) (byte) -1, intArray87);
        int int91 = util22.removeDuplicateElements(intArray87);
        int[] intArray92 = null;
        int int94 = util22.findKthLargestViaQuickSort(intArray92, (int) (short) 0);
        int int95 = util22.removeDuplicateElements(intArray78);
        int int97 = util0.threeSumClosest(intArray78, 7);
        java.lang.Class<?> wildcardClass98 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util33.removeDuplicateElements(intArray46);
        int int50 = util0.findMinSubArrayLen(1, intArray46);
        int int52 = util0.findKthLargestViaQuickSort(intArray15, (int) (byte) 100);
        java.lang.Class<?> wildcardClass53 = intArray15.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        java.lang.Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        util0.getNextPermutationNumber(intArray7);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, 1, (short) 1 };
        int int51 = util45.findMinSubArrayLen((-1), intArray50);
        Util util52 = new Util();
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        util53.getNextPermutationNumber(intArray59);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        util62.getNextPermutationNumber(intArray68);
        int int72 = util53.findKthLargestViaQuickSort(intArray68, (int) '#');
        Util util73 = new Util();
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, 1, (short) 1 };
        int int80 = util74.findMinSubArrayLen((-1), intArray79);
        util73.getNextPermutationNumber(intArray79);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, 1, (short) 1 };
        int int89 = util83.findMinSubArrayLen((-1), intArray88);
        util82.getNextPermutationNumber(intArray88);
        int int92 = util73.findKthLargestViaQuickSort(intArray88, (int) '#');
        int int93 = util53.removeDuplicateElements(intArray88);
        int int95 = util52.threeSumClosest(intArray88, (int) '#');
        int int96 = util45.findMinViaIteration(intArray88);
        int int98 = util0.findKthLargestViaQuickSort(intArray88, (int) ' ');
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int int44 = util0.threeSumClosest(intArray7, int41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, 1, (short) 1 };
        int int60 = util54.findMinSubArrayLen((-1), intArray59);
        int int61 = util53.removeDuplicateElements(intArray59);
        int int63 = util45.findKthLargestViaQuickSort(intArray59, (int) (byte) -1);
        int[] intArray71 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int72 = util45.findMinSubArrayLen(10, intArray71);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util73.findMinSubArrayLen((int) '#', intArray87);
        int int92 = util45.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int93 = util0.removeDuplicateElements(intArray87);
        int[] intArray94 = null;
        int int96 = util0.threeSumClosest(intArray94, (int) '#');
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        util31.getNextPermutationNumber(intArray36);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        util31.getNextPermutationNumber(intArray56);
        int int61 = util30.threeSumClosest(intArray56, (int) (short) 0);
        int int62 = util0.findMinSubArrayLen((int) 'a', intArray56);
        java.lang.Class<?> wildcardClass63 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int79 = util0.findMinViaIteration(intArray51);
        int int81 = util0.findKthLargestViaQuickSort(intArray27, 2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util21.getNextPermutationNumber(intArray26);
        int[] intArray29 = null;
        int int30 = util21.removeDuplicateElements(intArray29);
        int int32 = util21.findKthLargestViaQuickSort(intArray26, (int) (short) 1);
        int int34 = util0.findKthLargestViaQuickSort(intArray26, (int) (short) 100);
        int int36 = util0.threeSumClosest(intArray26, 1);
        util0.getNextPermutationNumber(intArray26);
        java.lang.Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, 1, (short) 1 };
        int int34 = util28.findMinSubArrayLen((-1), intArray33);
        int int35 = util27.removeDuplicateElements(intArray33);
        int int37 = util19.findKthLargestViaQuickSort(intArray33, (int) (byte) -1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util38.removeDuplicateElements(intArray51);
        int int56 = util19.threeSumClosest(intArray51, 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int75 = util57.findMinSubArrayLen((int) (byte) -1, intArray72);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        util76.getNextPermutationNumber(intArray81);
        int[] intArray84 = null;
        int int85 = util76.removeDuplicateElements(intArray84);
        int int87 = util76.findKthLargestViaQuickSort(intArray81, (int) (short) 1);
        int int88 = util57.findMinViaIteration(intArray81);
        int int90 = util19.findKthLargestViaQuickSort(intArray81, (int) (short) 10);
        int int91 = util0.findMinSubArrayLen(2, intArray81);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util51.findMinSubArrayLen((int) '#', intArray65);
        util51.getNextPermutationNumber(intArray56);
        int int70 = util0.findMinViaIteration(intArray56);
        util0.getNextPermutationNumber(intArray56);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        int int68 = util0.removeDuplicateElements(intArray24);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util0.getNextPermutationNumber(intArray75);
        java.lang.Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, 1, (short) 1 };
        int int51 = util45.findMinSubArrayLen((-1), intArray50);
        int int52 = util44.removeDuplicateElements(intArray50);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util44.findMinSubArrayLen((int) (byte) -1, intArray59);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, (-1), (short) 10, 10 };
        int int90 = util83.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int91 = util64.threeSumClosest(intArray88, int90);
        int int92 = util44.findMinSubArrayLen(10, intArray88);
        int int93 = util44.findMinViaIteration(intArray78);
        util44.getNextPermutationNumber(intArray50);
        int int95 = util0.findMinViaIteration(intArray50);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util46.threeSumClosest(intArray70, int72);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util74.removeDuplicateElements(intArray87);
        int int91 = util46.findKthLargestViaQuickSort(intArray87, int81);
        int int92 = util0.removeDuplicateElements(intArray87);
        int[] intArray93 = null;
        int int95 = util0.findKthLargestViaQuickSort(intArray93, (int) '4');
        int[] intArray97 = null;
        int int98 = util0.findMinSubArrayLen(0, intArray97);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int[] intArray37 = null;
        util0.getNextPermutationNumber(intArray37);
        java.lang.Class<?> wildcardClass39 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int47 = util38.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray44);
        int int49 = util0.threeSumClosest(intArray5, int15);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util50.findMinSubArrayLen((int) '#', intArray64);
        util50.getNextPermutationNumber(intArray55);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray75 = new int[] { 1, 1, (short) 1 };
        int int76 = util70.findMinSubArrayLen((-1), intArray75);
        int int77 = util69.removeDuplicateElements(intArray75);
        util50.getNextPermutationNumber(intArray75);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, 1, (short) 1 };
        int int86 = util80.findMinSubArrayLen((-1), intArray85);
        int int87 = util79.removeDuplicateElements(intArray85);
        int int88 = util79.findMinViaIteration(intArray85);
        int int89 = util50.removeDuplicateElements(intArray85);
        util0.getNextPermutationNumber(intArray85);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        int int52 = util0.threeSumClosest(intArray34, int47);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int69 = util61.removeDuplicateElements(intArray67);
        int int71 = util53.findKthLargestViaQuickSort(intArray67, (int) (byte) -1);
        int int72 = util53.removeDuplicateElements(intArray67);
        int int73 = util0.removeDuplicateElements(intArray67);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) '4');
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        util0.getNextPermutationNumber(intArray55);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        util8.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        util17.getNextPermutationNumber(intArray23);
        int int27 = util8.findKthLargestViaQuickSort(intArray23, (int) '#');
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        util28.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        util37.getNextPermutationNumber(intArray43);
        int int47 = util28.findKthLargestViaQuickSort(intArray43, (int) '#');
        int int48 = util8.removeDuplicateElements(intArray43);
        int int50 = util7.threeSumClosest(intArray43, (int) '#');
        int int51 = util0.findMinViaIteration(intArray43);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        util52.getNextPermutationNumber(intArray57);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        int int85 = util67.findKthLargestViaQuickSort(intArray81, (int) (byte) -1);
        int[] intArray93 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int94 = util67.findMinSubArrayLen(10, intArray93);
        int int95 = util60.removeDuplicateElements(intArray93);
        int int97 = util52.threeSumClosest(intArray93, (int) 'a');
        int int98 = util0.removeDuplicateElements(intArray93);
        util0.getNextPermutationNumber(intArray23);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 1, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        util29.getNextPermutationNumber(intArray54);
        int int59 = util28.threeSumClosest(intArray54, (int) (short) 0);
        int int61 = util28.findMinSubArrayLen(0, intArray34);
        int int63 = util0.threeSumClosest(intArray34, 3);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util64.findMinSubArrayLen((int) '#', intArray78);
        util64.getNextPermutationNumber(intArray69);
        Util util83 = new Util();
        int[] intArray88 = new int[] { 1, (-1), (short) 10, 10 };
        int int90 = util83.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int92 = util64.findKthLargestViaQuickSort(intArray88, (int) ' ');
        int int93 = util0.findMinSubArrayLen(int63, intArray88);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        java.lang.Class<?> wildcardClass37 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        util0.getNextPermutationNumber(intArray24);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util40.findMinSubArrayLen((int) '#', intArray54);
        util40.getNextPermutationNumber(intArray45);
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, (-1), (short) 10, 10 };
        int int66 = util59.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util40.findKthLargestViaQuickSort(intArray64, (int) ' ');
        int int69 = util0.findMinSubArrayLen(3, intArray64);
        java.lang.Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        Util util7 = new Util();
        int[] intArray12 = new int[] { 1, (-1), (short) 10, 10 };
        int int14 = util7.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, 1, (short) 1 };
        int int22 = util16.findMinSubArrayLen((-1), intArray21);
        int int23 = util15.removeDuplicateElements(intArray21);
        int int25 = util7.findKthLargestViaQuickSort(intArray21, (int) (byte) -1);
        int[] intArray33 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int34 = util7.findMinSubArrayLen(10, intArray33);
        int int35 = util0.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        int int56 = util37.findMinSubArrayLen(3, intArray53);
        int int57 = util0.findMinSubArrayLen(2, intArray53);
        int int59 = util0.threeSumClosest(intArray12, 10);
        int[] intArray60 = null;
        int int61 = util0.removeDuplicateElements(intArray60);
        java.lang.Class<?> wildcardClass62 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, (-1), (short) 10, 10 };
        int int68 = util61.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int69 = util52.findMinSubArrayLen((int) '#', intArray66);
        util52.getNextPermutationNumber(intArray57);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        int int79 = util71.removeDuplicateElements(intArray77);
        util52.getNextPermutationNumber(intArray77);
        int int82 = util51.threeSumClosest(intArray77, (int) (short) 0);
        int int84 = util51.findMinSubArrayLen(0, intArray57);
        int int85 = util0.findMinSubArrayLen((int) (byte) 0, intArray57);
        int[] intArray86 = null;
        int int88 = util0.findKthLargestViaQuickSort(intArray86, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int47 = util8.findKthLargestViaQuickSort(intArray32, 5);
        int int48 = util0.removeDuplicateElements(intArray32);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int int8 = util0.threeSumClosest(intArray5, int6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, 1, (short) 1 };
        int int24 = util18.findMinSubArrayLen((-1), intArray23);
        int int25 = util17.removeDuplicateElements(intArray23);
        int int27 = util9.findKthLargestViaQuickSort(intArray23, (int) (byte) -1);
        int[] intArray35 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int36 = util9.findMinSubArrayLen(10, intArray35);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, 1, (short) 1 };
        int int52 = util46.findMinSubArrayLen((-1), intArray51);
        int int53 = util45.removeDuplicateElements(intArray51);
        int int55 = util37.findKthLargestViaQuickSort(intArray51, (int) (byte) -1);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int65 = util37.threeSumClosest(intArray61, 3);
        int int67 = util9.findKthLargestViaQuickSort(intArray61, (int) 'a');
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util9.findKthLargestViaQuickSort(intArray74, 0);
        int[] intArray84 = new int[] { (short) -1, (byte) 100, (short) 100, (byte) -1, 0 };
        int int85 = util9.removeDuplicateElements(intArray84);
        util0.getNextPermutationNumber(intArray84);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 0, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        int int28 = util19.findMinViaIteration(intArray25);
        int int30 = util0.threeSumClosest(intArray25, (int) (byte) 0);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util31.findMinSubArrayLen((int) '#', intArray45);
        util31.getNextPermutationNumber(intArray36);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, 1, (short) 1 };
        int int57 = util51.findMinSubArrayLen((-1), intArray56);
        int int58 = util50.removeDuplicateElements(intArray56);
        int int59 = util50.findMinViaIteration(intArray56);
        int int61 = util31.threeSumClosest(intArray56, (int) (byte) 0);
        int int63 = util31.findKthLargestViaQuickSort(intArray36, 1);
        int int65 = util0.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        java.lang.Class<?> wildcardClass66 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        java.lang.Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util33.threeSumClosest(intArray57, 3);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int70 = util33.findKthLargestViaQuickSort(intArray67, 3);
        int int71 = util0.findMinSubArrayLen((int) 'a', intArray67);
        int int72 = util0.findMinViaIteration(intArray26);
        Util util73 = new Util();
        int[] intArray78 = new int[] { 1, (-1), (short) 10, 10 };
        int int80 = util73.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, (-1), (short) 10, 10 };
        int int89 = util82.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util73.findMinSubArrayLen((int) '#', intArray87);
        util73.getNextPermutationNumber(intArray78);
        int int93 = util73.findMinSubArrayLen(0, intArray87);
        util0.getNextPermutationNumber(intArray87);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        util0.getNextPermutationNumber(intArray16);
        int int44 = util0.findMinViaIteration(intArray27);
        Util util45 = new Util();
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        util56.getNextPermutationNumber(intArray62);
        int int65 = util46.findMinSubArrayLen(3, intArray62);
        int int66 = util45.findMinViaIteration(intArray62);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util45.removeDuplicateElements(intArray72);
        int int75 = util0.findKthLargestViaQuickSort(intArray72, int42);
        int[] intArray76 = null;
        int int77 = util0.findMinViaIteration(intArray76);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int[] intArray51 = null;
        int int53 = util0.findKthLargestViaQuickSort(intArray51, 0);
        int int55 = util0.threeSumClosest(intArray5, (int) (short) 0);
        Util util56 = new Util();
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, 1, (short) 1 };
        int int74 = util68.findMinSubArrayLen((-1), intArray73);
        util67.getNextPermutationNumber(intArray73);
        int int76 = util57.findMinSubArrayLen(3, intArray73);
        int int77 = util56.findMinViaIteration(intArray73);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util56.removeDuplicateElements(intArray83);
        int[] intArray87 = null;
        int int88 = util56.findMinSubArrayLen((int) (short) 100, intArray87);
        util56.getNextPermutationNumber(intArray83);
        util0.getNextPermutationNumber(intArray83);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        int int48 = util29.findMinSubArrayLen(3, intArray45);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util49.removeDuplicateElements(intArray62);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util66.findMinSubArrayLen((int) '#', intArray80);
        util66.getNextPermutationNumber(intArray71);
        int int85 = util49.findMinViaIteration(intArray71);
        int int87 = util29.findKthLargestViaQuickSort(intArray71, (int) '4');
        int int88 = util21.removeDuplicateElements(intArray71);
        int int89 = util0.findMinViaIteration(intArray71);
        Util util90 = new Util();
        int[] intArray95 = new int[] { 1, 1, (short) 1 };
        int int96 = util90.findMinSubArrayLen((-1), intArray95);
        int int97 = util0.removeDuplicateElements(intArray95);
        util0.getNextPermutationNumber(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int85 = util77.removeDuplicateElements(intArray83);
        Util util87 = new Util();
        Util util88 = new Util();
        int[] intArray93 = new int[] { 1, 1, (short) 1 };
        int int94 = util88.findMinSubArrayLen((-1), intArray93);
        util87.getNextPermutationNumber(intArray93);
        int int96 = util77.findMinSubArrayLen(3, intArray93);
        int int97 = util0.findMinViaIteration(intArray93);
        int int98 = util0.findMinViaIteration(intArray36);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, (-1), (short) 10, 10 };
        int int57 = util50.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int58 = util41.findMinSubArrayLen((int) '#', intArray55);
        util41.getNextPermutationNumber(intArray46);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray66 = new int[] { 1, 1, (short) 1 };
        int int67 = util61.findMinSubArrayLen((-1), intArray66);
        int int68 = util60.removeDuplicateElements(intArray66);
        util41.getNextPermutationNumber(intArray66);
        int int71 = util0.findKthLargestViaQuickSort(intArray66, (int) ' ');
        int int72 = util0.removeDuplicateElements(intArray66);
        java.lang.Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int[] intArray8 = null;
        int int9 = util0.findMinViaIteration(intArray8);
        util0.getNextPermutationNumber(intArray5);
        java.lang.Class<?> wildcardClass11 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        int[] intArray39 = null;
        int int41 = util0.findKthLargestViaQuickSort(intArray39, 100);
        int int42 = util0.removeDuplicateElements(intArray33);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, (-1), (short) 10, 10 };
        int int51 = util44.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int61 = util44.findMinSubArrayLen((int) '#', intArray58);
        util44.getNextPermutationNumber(intArray49);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, 1, (short) 1 };
        int int70 = util64.findMinSubArrayLen((-1), intArray69);
        int int71 = util63.removeDuplicateElements(intArray69);
        util44.getNextPermutationNumber(intArray69);
        int int74 = util43.threeSumClosest(intArray69, (int) (short) 0);
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, (-1), (short) 10, 10 };
        int int83 = util76.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        Util util84 = new Util();
        int[] intArray89 = new int[] { 1, (-1), (short) 10, 10 };
        int int91 = util84.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int92 = util76.removeDuplicateElements(intArray89);
        int int93 = util43.findMinSubArrayLen(1, intArray89);
        int int95 = util43.findKthLargestViaQuickSort(intArray58, (int) (byte) 100);
        int int96 = util0.removeDuplicateElements(intArray58);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 5 + "'", int96 == 5);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        int int47 = util38.findMinViaIteration(intArray44);
        util0.getNextPermutationNumber(intArray44);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int66 = util49.findMinSubArrayLen((int) '#', intArray63);
        util49.getNextPermutationNumber(intArray54);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util49.threeSumClosest(intArray73, int75);
        util0.getNextPermutationNumber(intArray73);
        java.lang.Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        util9.getNextPermutationNumber(intArray34);
        int int38 = util0.removeDuplicateElements(intArray34);
        int int40 = util0.findMinSubArrayLen((int) (short) -1, intArray14);
        int int41 = util0.removeDuplicateElements(intArray14);
        java.lang.Class<?> wildcardClass42 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int int37 = util0.removeDuplicateElements(intArray22);
        int int39 = util0.findKthLargestViaQuickSort(intArray31, (int) '#');
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util40.findMinSubArrayLen((int) '#', intArray54);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int77 = util58.findMinSubArrayLen(3, intArray74);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, (-1), (short) 10, 10 };
        int int93 = util86.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util78.removeDuplicateElements(intArray91);
        int int96 = util58.threeSumClosest(intArray91, (int) (short) 1);
        int int97 = util40.removeDuplicateElements(intArray91);
        util0.getNextPermutationNumber(intArray91);
        int int99 = util0.findMinViaIteration(intArray45);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, 1, (short) 1 };
        int int14 = util8.findMinSubArrayLen((-1), intArray13);
        Util util15 = new Util();
        int[] intArray20 = new int[] { 1, (-1), (short) 10, 10 };
        int int22 = util15.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray29 = new int[] { 1, 1, (short) 1 };
        int int30 = util24.findMinSubArrayLen((-1), intArray29);
        int int31 = util23.removeDuplicateElements(intArray29);
        int int33 = util15.findKthLargestViaQuickSort(intArray29, (int) (byte) -1);
        int[] intArray41 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int42 = util15.findMinSubArrayLen(10, intArray41);
        int int43 = util8.removeDuplicateElements(intArray41);
        int int45 = util0.threeSumClosest(intArray41, (int) 'a');
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        int int84 = util75.findMinViaIteration(intArray81);
        int int85 = util46.removeDuplicateElements(intArray81);
        int int87 = util0.findKthLargestViaQuickSort(intArray81, (int) (short) 100);
        util0.getNextPermutationNumber(intArray51);
        java.lang.Class<?> wildcardClass89 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int int9 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 100);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util10.findMinSubArrayLen((int) '#', intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util29.findMinSubArrayLen((int) '#', intArray43);
        util29.getNextPermutationNumber(intArray34);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        int int56 = util48.removeDuplicateElements(intArray54);
        util29.getNextPermutationNumber(intArray54);
        int int59 = util28.threeSumClosest(intArray54, (int) (short) 0);
        int int60 = util10.removeDuplicateElements(intArray54);
        int int62 = util10.findMinSubArrayLen((int) (byte) 100, intArray43);
        int int63 = util0.removeDuplicateElements(intArray43);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        util0.getNextPermutationNumber(intArray79);
        Util util89 = new Util();
        Util util90 = new Util();
        int[] intArray95 = new int[] { 1, 1, (short) 1 };
        int int96 = util90.findMinSubArrayLen((-1), intArray95);
        util89.getNextPermutationNumber(intArray95);
        util0.getNextPermutationNumber(intArray95);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, (-1), (short) 10, 10 };
        int int44 = util37.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util37.findMinSubArrayLen((int) '#', intArray51);
        util37.getNextPermutationNumber(intArray42);
        int int56 = util20.findMinViaIteration(intArray42);
        int int57 = util0.findMinSubArrayLen(0, intArray42);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        int[] intArray80 = new int[] { 5, 4, 'a' };
        int int81 = util58.removeDuplicateElements(intArray80);
        int int82 = util0.removeDuplicateElements(intArray80);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        util56.getNextPermutationNumber(intArray62);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        util65.getNextPermutationNumber(intArray71);
        int int75 = util56.findKthLargestViaQuickSort(intArray71, (int) '#');
        int int76 = util0.findMinViaIteration(intArray71);
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, 1, (short) 1 };
        int int40 = util34.findMinSubArrayLen((-1), intArray39);
        int int41 = util33.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, 1, (short) 1 };
        int int50 = util44.findMinSubArrayLen((-1), intArray49);
        util43.getNextPermutationNumber(intArray49);
        int int52 = util33.findMinSubArrayLen(3, intArray49);
        int int53 = util0.findMinSubArrayLen((-1), intArray49);
        int[] intArray54 = null;
        util0.getNextPermutationNumber(intArray54);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util19.findKthLargestViaQuickSort(intArray43, (int) ' ');
        int int49 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) -1);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        int[] intArray53 = null;
        int int54 = util0.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray55 = null;
        util0.getNextPermutationNumber(intArray55);
        int int57 = util0.removeDuplicateElements(intArray14);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, (-1), (short) 10, 10 };
        int int65 = util58.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util66.removeDuplicateElements(intArray72);
        int int76 = util58.findKthLargestViaQuickSort(intArray72, (int) (byte) -1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util58.threeSumClosest(intArray82, 3);
        Util util87 = new Util();
        int[] intArray92 = new int[] { 1, 1, (short) 1 };
        int int93 = util87.findMinSubArrayLen((-1), intArray92);
        util87.getNextPermutationNumber(intArray92);
        int int95 = util58.removeDuplicateElements(intArray92);
        int int97 = util0.findKthLargestViaQuickSort(intArray92, 5);
        int int99 = util0.threeSumClosest(intArray5, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        util1.getNextPermutationNumber(intArray7);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int20 = util1.findKthLargestViaQuickSort(intArray16, (int) '#');
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util1.removeDuplicateElements(intArray36);
        int int43 = util0.threeSumClosest(intArray36, (int) '#');
        int[] intArray44 = null;
        int int45 = util0.findMinViaIteration(intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util46.findMinSubArrayLen((int) '#', intArray60);
        util46.getNextPermutationNumber(intArray51);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, 1, (short) 1 };
        int int72 = util66.findMinSubArrayLen((-1), intArray71);
        int int73 = util65.removeDuplicateElements(intArray71);
        util46.getNextPermutationNumber(intArray71);
        int int76 = util0.threeSumClosest(intArray71, (int) (byte) 0);
        int int78 = util0.findKthLargestViaQuickSort(intArray60, 7);
        int int79 = util0.findMinViaIteration(intArray51);
        java.lang.Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, 1, (short) 1 };
        int int23 = util17.findMinSubArrayLen((-1), intArray22);
        int int24 = util16.removeDuplicateElements(intArray22);
        int int26 = util8.findKthLargestViaQuickSort(intArray22, (int) (byte) -1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util8.threeSumClosest(intArray32, 3);
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int45 = util8.findKthLargestViaQuickSort(intArray42, 3);
        int int46 = util0.findMinViaIteration(intArray42);
        util0.getNextPermutationNumber(intArray5);
        util0.getNextPermutationNumber(intArray13);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util19.removeDuplicateElements(intArray32);
        int int37 = util0.threeSumClosest(intArray32, 1);
        util0.getNextPermutationNumber(intArray24);
        int int39 = util0.findMinViaIteration(intArray14);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util72.getNextPermutationNumber(intArray77);
        int int80 = util43.removeDuplicateElements(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        int int83 = util0.threeSumClosest(intArray36, (int) 'a');
        java.lang.Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        int int49 = util0.findMinViaIteration(intArray34);
        util0.getNextPermutationNumber(intArray6);
        java.lang.Class<?> wildcardClass51 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        int int42 = util0.findKthLargestViaQuickSort(intArray24, (int) (byte) 0);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        int int62 = util0.removeDuplicateElements(intArray57);
        int[] intArray63 = null;
        int int65 = util0.threeSumClosest(intArray63, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, (-1), (short) 10, 10 };
        int int45 = util38.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util19.threeSumClosest(intArray43, int45);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, 1, (short) 1 };
        int int62 = util56.findMinSubArrayLen((-1), intArray61);
        int int63 = util55.removeDuplicateElements(intArray61);
        int int65 = util47.findKthLargestViaQuickSort(intArray61, (int) (byte) -1);
        Util util66 = new Util();
        int[] intArray71 = new int[] { 1, (-1), (short) 10, 10 };
        int int73 = util66.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray79 = new int[] { 1, (-1), (short) 10, 10 };
        int int81 = util74.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util66.removeDuplicateElements(intArray79);
        int int84 = util47.threeSumClosest(intArray79, 1);
        util19.getNextPermutationNumber(intArray79);
        int int87 = util0.findKthLargestViaQuickSort(intArray79, (int) 'a');
        util0.getNextPermutationNumber(intArray79);
        java.lang.Class<?> wildcardClass89 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.findKthLargestViaQuickSort(intArray24, (int) ' ');
        int[] intArray29 = null;
        int int30 = util0.findKthLargestViaQuickSort(intArray29, int26);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util31.getNextPermutationNumber(intArray36);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, 1, (short) 1 };
        int int61 = util55.findMinSubArrayLen((-1), intArray60);
        int int62 = util54.removeDuplicateElements(intArray60);
        int int64 = util46.findKthLargestViaQuickSort(intArray60, (int) (byte) -1);
        int[] intArray72 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int73 = util46.findMinSubArrayLen(10, intArray72);
        int int74 = util39.removeDuplicateElements(intArray72);
        int int76 = util31.threeSumClosest(intArray72, (int) 'a');
        int int78 = util31.findMinSubArrayLen((int) (byte) 1, intArray60);
        int int79 = util0.findMinViaIteration(intArray60);
        java.lang.Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util18.findMinSubArrayLen((int) '#', intArray32);
        Util util36 = new Util();
        Util util37 = new Util();
        int[] intArray42 = new int[] { 1, 1, (short) 1 };
        int int43 = util37.findMinSubArrayLen((-1), intArray42);
        int int44 = util36.removeDuplicateElements(intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        util46.getNextPermutationNumber(intArray52);
        int int55 = util36.findMinSubArrayLen(3, intArray52);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util56.removeDuplicateElements(intArray69);
        int int74 = util36.threeSumClosest(intArray69, (int) (short) 1);
        int int75 = util18.removeDuplicateElements(intArray69);
        int int77 = util18.threeSumClosest(intArray23, (int) (short) 1);
        int int79 = util0.threeSumClosest(intArray23, 3);
        int int81 = util0.findMinSubArrayLen(1, intArray5);
        java.lang.Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        int int45 = util0.findKthLargestViaQuickSort(intArray41, int35);
        Util util46 = new Util();
        int[] intArray51 = new int[] { 1, (-1), (short) 10, 10 };
        int int53 = util46.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int55 = util0.findKthLargestViaQuickSort(intArray51, (int) (short) 100);
        int int56 = util0.removeDuplicateElements(intArray5);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int66 = util57.findMinViaIteration(intArray63);
        int int67 = util0.findMinSubArrayLen(int7, intArray63);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util77 = new Util();
        int[] intArray82 = new int[] { 1, (-1), (short) 10, 10 };
        int int84 = util77.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int85 = util68.findMinSubArrayLen((int) '#', intArray82);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, 1, (short) 1 };
        int int92 = util86.findMinSubArrayLen((-1), intArray91);
        util86.getNextPermutationNumber(intArray91);
        int int95 = util68.threeSumClosest(intArray91, (int) 'a');
        int int97 = util0.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        int int99 = util0.threeSumClosest(intArray63, 7);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util19.findMinSubArrayLen((int) '#', intArray33);
        util19.getNextPermutationNumber(intArray24);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        int int46 = util38.removeDuplicateElements(intArray44);
        util19.getNextPermutationNumber(intArray44);
        int int49 = util18.threeSumClosest(intArray44, (int) (short) 0);
        int int50 = util0.removeDuplicateElements(intArray44);
        int int52 = util0.findMinSubArrayLen((int) (byte) 100, intArray33);
        Util util53 = new Util();
        int[] intArray58 = new int[] { 1, (-1), (short) 10, 10 };
        int int60 = util53.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int69 = util61.removeDuplicateElements(intArray67);
        int int71 = util53.findKthLargestViaQuickSort(intArray67, (int) (byte) -1);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, (-1), (short) 10, 10 };
        int int79 = util72.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int81 = util53.threeSumClosest(intArray77, 3);
        Util util82 = new Util();
        int[] intArray87 = new int[] { 1, 1, (short) 1 };
        int int88 = util82.findMinSubArrayLen((-1), intArray87);
        int int90 = util53.findKthLargestViaQuickSort(intArray87, 3);
        int int91 = util0.removeDuplicateElements(intArray87);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util1.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray32 = new int[] { 1, (-1), (short) 10, 10 };
        int int34 = util27.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int35 = util18.findMinSubArrayLen((int) '#', intArray32);
        util18.getNextPermutationNumber(intArray23);
        int int37 = util1.findMinViaIteration(intArray23);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util39.findMinSubArrayLen((int) '#', intArray53);
        util39.getNextPermutationNumber(intArray44);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        util39.getNextPermutationNumber(intArray64);
        int int69 = util38.threeSumClosest(intArray64, (int) (short) 0);
        util1.getNextPermutationNumber(intArray64);
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, (-1), (short) 10, 10 };
        int int78 = util71.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        Util util80 = new Util();
        int[] intArray85 = new int[] { 1, (-1), (short) 10, 10 };
        int int87 = util80.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int88 = util71.findMinSubArrayLen((int) '#', intArray85);
        util71.getNextPermutationNumber(intArray76);
        util1.getNextPermutationNumber(intArray76);
        util0.getNextPermutationNumber(intArray76);
        java.lang.Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util43.findMinSubArrayLen((int) '#', intArray57);
        util43.getNextPermutationNumber(intArray48);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray68 = new int[] { 1, 1, (short) 1 };
        int int69 = util63.findMinSubArrayLen((-1), intArray68);
        int int70 = util62.removeDuplicateElements(intArray68);
        util43.getNextPermutationNumber(intArray68);
        int int73 = util42.threeSumClosest(intArray68, (int) (short) 0);
        int int75 = util42.findMinSubArrayLen(0, intArray48);
        int int76 = util0.findMinSubArrayLen((int) (byte) 100, intArray48);
        int[] intArray77 = null;
        int int79 = util0.threeSumClosest(intArray77, 5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        int int20 = util0.findMinSubArrayLen(0, intArray14);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util21.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util39.getNextPermutationNumber(intArray44);
        int int48 = util21.threeSumClosest(intArray44, (int) 'a');
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int67 = util49.findKthLargestViaQuickSort(intArray63, (int) (byte) -1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util49.threeSumClosest(intArray73, 3);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int86 = util49.findKthLargestViaQuickSort(intArray83, 3);
        int int87 = util21.findMinViaIteration(intArray83);
        int int89 = util0.threeSumClosest(intArray83, (int) 'a');
        java.lang.Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        int[] intArray39 = null;
        int int41 = util0.findKthLargestViaQuickSort(intArray39, 100);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, 1, (short) 1 };
        int int49 = util43.findMinSubArrayLen((-1), intArray48);
        util42.getNextPermutationNumber(intArray48);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util51.findMinSubArrayLen((int) '#', intArray65);
        int int70 = util42.findKthLargestViaQuickSort(intArray65, 5);
        int int71 = util0.removeDuplicateElements(intArray65);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, (-1), (short) 10, 10 };
        int int79 = util72.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int80 = util0.findMinViaIteration(intArray77);
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        util81.getNextPermutationNumber(intArray86);
        int int90 = util81.findKthLargestViaQuickSort(intArray86, (int) (byte) 100);
        util0.getNextPermutationNumber(intArray86);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        int[] intArray8 = null;
        int int9 = util0.findMinViaIteration(intArray8);
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, (-1), (short) 10, 10 };
        int int18 = util11.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int int28 = util11.findMinSubArrayLen((int) '#', intArray25);
        util11.getNextPermutationNumber(intArray16);
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, (-1), (short) 10, 10 };
        int int37 = util30.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util11.threeSumClosest(intArray35, int37);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, (-1), (short) 10, 10 };
        int int54 = util47.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util39.removeDuplicateElements(intArray52);
        int int56 = util11.findKthLargestViaQuickSort(intArray52, int46);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int66 = util11.findKthLargestViaQuickSort(intArray62, (int) (short) 100);
        int int67 = util0.findMinSubArrayLen((int) ' ', intArray62);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        int int76 = util68.removeDuplicateElements(intArray74);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray84 = new int[] { 1, 1, (short) 1 };
        int int85 = util79.findMinSubArrayLen((-1), intArray84);
        util78.getNextPermutationNumber(intArray84);
        int int87 = util68.findMinSubArrayLen(3, intArray84);
        int int88 = util0.removeDuplicateElements(intArray84);
        util0.getNextPermutationNumber(intArray52);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util20.removeDuplicateElements(intArray33);
        int int38 = util0.threeSumClosest(intArray33, (int) (short) 1);
        int[] intArray39 = null;
        int int41 = util0.findKthLargestViaQuickSort(intArray39, 100);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, 1, (short) 1 };
        int int49 = util43.findMinSubArrayLen((-1), intArray48);
        util42.getNextPermutationNumber(intArray48);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, (-1), (short) 10, 10 };
        int int67 = util60.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util51.findMinSubArrayLen((int) '#', intArray65);
        int int70 = util42.findKthLargestViaQuickSort(intArray65, 5);
        int int71 = util0.removeDuplicateElements(intArray65);
        int[] intArray72 = null;
        int int74 = util0.findKthLargestViaQuickSort(intArray72, 0);
        java.lang.Class<?> wildcardClass75 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        Util util51 = new Util();
        int[] intArray56 = new int[] { 1, (-1), (short) 10, 10 };
        int int58 = util51.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        int int67 = util59.removeDuplicateElements(intArray65);
        int int69 = util51.findKthLargestViaQuickSort(intArray65, (int) (byte) -1);
        int[] intArray77 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int78 = util51.findMinSubArrayLen(10, intArray77);
        int int79 = util0.removeDuplicateElements(intArray77);
        int int81 = util0.findMinSubArrayLen((int) (byte) 1, intArray14);
        int[] intArray83 = null;
        int int84 = util0.findMinSubArrayLen(10, intArray83);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        int int29 = util0.removeDuplicateElements(intArray27);
        int[] intArray31 = null;
        int int32 = util0.findMinSubArrayLen((int) (short) 100, intArray31);
        int int33 = util0.removeDuplicateElements(intArray17);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util72.getNextPermutationNumber(intArray77);
        int int80 = util43.removeDuplicateElements(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        int int83 = util0.threeSumClosest(intArray36, (int) 'a');
        int int85 = util0.findMinSubArrayLen(6, intArray27);
        java.lang.Class<?> wildcardClass86 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 1);
        java.lang.Class<?> wildcardClass41 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        util0.getNextPermutationNumber(intArray16);
        int int44 = util0.findMinViaIteration(intArray27);
        Util util45 = new Util();
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        util56.getNextPermutationNumber(intArray62);
        int int65 = util46.findMinSubArrayLen(3, intArray62);
        int int66 = util45.findMinViaIteration(intArray62);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, 1, (short) 1 };
        int int73 = util67.findMinSubArrayLen((-1), intArray72);
        int int74 = util45.removeDuplicateElements(intArray72);
        int int75 = util0.findKthLargestViaQuickSort(intArray72, int42);
        int int76 = util0.findMinViaIteration(intArray62);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        int int86 = util0.threeSumClosest(intArray25, (int) (short) 100);
        int int88 = util0.findKthLargestViaQuickSort(intArray34, (int) '4');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util10.findMinSubArrayLen((int) '#', intArray24);
        util10.getNextPermutationNumber(intArray15);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        int int37 = util29.removeDuplicateElements(intArray35);
        util10.getNextPermutationNumber(intArray35);
        int int40 = util9.threeSumClosest(intArray35, (int) (short) 0);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        int int65 = util57.removeDuplicateElements(intArray63);
        int int67 = util49.findKthLargestViaQuickSort(intArray63, (int) (byte) -1);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util49.threeSumClosest(intArray73, 3);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        int int86 = util49.findKthLargestViaQuickSort(intArray83, 3);
        int int87 = util41.findMinViaIteration(intArray83);
        int int88 = util9.findKthLargestViaQuickSort(intArray83, int56);
        util0.getNextPermutationNumber(intArray83);
        int int90 = util0.removeDuplicateElements(intArray54);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, (-1), (short) 10, 10 };
        int int27 = util20.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util20.findMinSubArrayLen((int) '#', intArray34);
        util20.getNextPermutationNumber(intArray25);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util20.threeSumClosest(intArray44, int46);
        int int48 = util0.findMinSubArrayLen(10, intArray44);
        int int49 = util0.findMinViaIteration(intArray34);
        util0.getNextPermutationNumber(intArray15);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        util18.getNextPermutationNumber(intArray24);
        int int27 = util8.findMinSubArrayLen(3, intArray24);
        Util util28 = new Util();
        int[] intArray33 = new int[] { 1, (-1), (short) 10, 10 };
        int int35 = util28.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray41 = new int[] { 1, (-1), (short) 10, 10 };
        int int43 = util36.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int int44 = util28.removeDuplicateElements(intArray41);
        Util util45 = new Util();
        int[] intArray50 = new int[] { 1, (-1), (short) 10, 10 };
        int int52 = util45.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util45.findMinSubArrayLen((int) '#', intArray59);
        util45.getNextPermutationNumber(intArray50);
        int int64 = util28.findMinViaIteration(intArray50);
        int int66 = util8.findKthLargestViaQuickSort(intArray50, (int) '4');
        int int67 = util0.removeDuplicateElements(intArray50);
        int int69 = util0.findMinSubArrayLen(0, intArray5);
        int int71 = util0.findKthLargestViaQuickSort(intArray50, 2);
        int[] intArray72 = null;
        int int73 = util0.removeDuplicateElements(intArray72);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, (-1), (short) 10, 10 };
        int int32 = util25.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int int33 = util17.removeDuplicateElements(intArray30);
        Util util34 = new Util();
        int[] intArray39 = new int[] { 1, (-1), (short) 10, 10 };
        int int41 = util34.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util34.findMinSubArrayLen((int) '#', intArray48);
        util34.getNextPermutationNumber(intArray39);
        int int53 = util17.findMinViaIteration(intArray39);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray60 = new int[] { 1, (-1), (short) 10, 10 };
        int int62 = util55.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray69 = new int[] { 1, (-1), (short) 10, 10 };
        int int71 = util64.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int72 = util55.findMinSubArrayLen((int) '#', intArray69);
        util55.getNextPermutationNumber(intArray60);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, 1, (short) 1 };
        int int81 = util75.findMinSubArrayLen((-1), intArray80);
        int int82 = util74.removeDuplicateElements(intArray80);
        util55.getNextPermutationNumber(intArray80);
        int int85 = util54.threeSumClosest(intArray80, (int) (short) 0);
        util17.getNextPermutationNumber(intArray80);
        int int87 = util0.findMinViaIteration(intArray80);
        int int88 = util0.removeDuplicateElements(intArray80);
        int int90 = util0.findMinSubArrayLen((int) (byte) 10, intArray5);
        java.lang.Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        Util util16 = new Util();
        int[] intArray21 = new int[] { 1, (-1), (short) 10, 10 };
        int int23 = util16.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        Util util24 = new Util();
        Util util25 = new Util();
        int[] intArray30 = new int[] { 1, 1, (short) 1 };
        int int31 = util25.findMinSubArrayLen((-1), intArray30);
        int int32 = util24.removeDuplicateElements(intArray30);
        int int34 = util16.findKthLargestViaQuickSort(intArray30, (int) (byte) -1);
        int[] intArray42 = new int[] { (short) -1, 1, 10, (short) 1, (byte) 10, (byte) 1 };
        int int43 = util16.findMinSubArrayLen(10, intArray42);
        int int44 = util9.removeDuplicateElements(intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray52 = new int[] { 1, 1, (short) 1 };
        int int53 = util47.findMinSubArrayLen((-1), intArray52);
        int int54 = util46.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, 1, (short) 1 };
        int int63 = util57.findMinSubArrayLen((-1), intArray62);
        util56.getNextPermutationNumber(intArray62);
        int int65 = util46.findMinSubArrayLen(3, intArray62);
        int int66 = util9.findMinSubArrayLen(2, intArray62);
        int int68 = util9.threeSumClosest(intArray21, 10);
        int int69 = util0.findMinViaIteration(intArray21);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray76 = new int[] { 1, 1, (short) 1 };
        int int77 = util71.findMinSubArrayLen((-1), intArray76);
        util70.getNextPermutationNumber(intArray76);
        int int79 = util70.findMinViaIteration(intArray76);
        int int81 = util0.findKthLargestViaQuickSort(intArray76, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, 1, (short) 1 };
        int int45 = util39.findMinSubArrayLen((-1), intArray44);
        util38.getNextPermutationNumber(intArray44);
        int int48 = util29.findKthLargestViaQuickSort(intArray44, (int) '#');
        int int50 = util0.threeSumClosest(intArray44, (int) (short) 100);
        int[] intArray51 = null;
        util0.getNextPermutationNumber(intArray51);
        java.lang.Class<?> wildcardClass53 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        int[] intArray23 = null;
        int int24 = util0.findMinSubArrayLen(100, intArray23);
        Util util25 = new Util();
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, 1, (short) 1 };
        int int32 = util26.findMinSubArrayLen((-1), intArray31);
        int int33 = util25.removeDuplicateElements(intArray31);
        int int34 = util25.findMinViaIteration(intArray31);
        Util util35 = new Util();
        int[] intArray40 = new int[] { 1, (-1), (short) 10, 10 };
        int int42 = util35.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        Util util44 = new Util();
        int[] intArray49 = new int[] { 1, 1, (short) 1 };
        int int50 = util44.findMinSubArrayLen((-1), intArray49);
        int int51 = util43.removeDuplicateElements(intArray49);
        int int53 = util35.findKthLargestViaQuickSort(intArray49, (int) (byte) -1);
        Util util54 = new Util();
        int[] intArray59 = new int[] { 1, (-1), (short) 10, 10 };
        int int61 = util54.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int63 = util35.threeSumClosest(intArray59, 3);
        util25.getNextPermutationNumber(intArray59);
        util25.getNextPermutationNumber(intArray40);
        int int67 = util25.findKthLargestViaQuickSort(intArray49, (int) (byte) 0);
        Util util68 = new Util();
        int[] intArray73 = new int[] { 1, (-1), (short) 10, 10 };
        int int75 = util68.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util68.findMinSubArrayLen(10, intArray73);
        int int79 = util25.threeSumClosest(intArray73, (int) (byte) 10);
        int int80 = util25.findMinViaIteration(intArray49);
        int int81 = util0.removeDuplicateElements(intArray49);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray16 = new int[] { 1, 1, (short) 1 };
        int int17 = util11.findMinSubArrayLen((-1), intArray16);
        util10.getNextPermutationNumber(intArray16);
        int int19 = util0.findMinSubArrayLen(3, intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, 1, (short) 1 };
        int int28 = util22.findMinSubArrayLen((-1), intArray27);
        util21.getNextPermutationNumber(intArray27);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        util30.getNextPermutationNumber(intArray36);
        int int40 = util21.findKthLargestViaQuickSort(intArray36, (int) '#');
        int int41 = util0.findMinSubArrayLen((int) '#', intArray36);
        int int42 = util0.removeDuplicateElements(intArray6);
        Util util43 = new Util();
        int[] intArray48 = new int[] { 1, (-1), (short) 10, 10 };
        int int50 = util43.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        int int61 = util43.findKthLargestViaQuickSort(intArray57, (int) (byte) -1);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, (-1), (short) 10, 10 };
        int int69 = util62.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util43.threeSumClosest(intArray67, 3);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, 1, (short) 1 };
        int int78 = util72.findMinSubArrayLen((-1), intArray77);
        util72.getNextPermutationNumber(intArray77);
        int int80 = util43.removeDuplicateElements(intArray77);
        int int81 = util0.findMinViaIteration(intArray77);
        int int83 = util0.threeSumClosest(intArray36, (int) 'a');
        int int85 = util0.findKthLargestViaQuickSort(intArray27, (int) ' ');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, (-1), (short) 10, 10 };
        int int8 = util1.findKthLargestViaQuickSort(intArray6, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util1.findMinSubArrayLen((int) '#', intArray15);
        util1.getNextPermutationNumber(intArray6);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        int int28 = util20.removeDuplicateElements(intArray26);
        util1.getNextPermutationNumber(intArray26);
        int int31 = util0.threeSumClosest(intArray26, (int) (short) 0);
        Util util33 = new Util();
        int[] intArray38 = new int[] { 1, (-1), (short) 10, 10 };
        int int40 = util33.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        Util util42 = new Util();
        int[] intArray47 = new int[] { 1, 1, (short) 1 };
        int int48 = util42.findMinSubArrayLen((-1), intArray47);
        int int49 = util41.removeDuplicateElements(intArray47);
        int int51 = util33.findKthLargestViaQuickSort(intArray47, (int) (byte) -1);
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, (-1), (short) 10, 10 };
        int int59 = util52.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util33.threeSumClosest(intArray57, 3);
        Util util62 = new Util();
        int[] intArray67 = new int[] { 1, 1, (short) 1 };
        int int68 = util62.findMinSubArrayLen((-1), intArray67);
        int int70 = util33.findKthLargestViaQuickSort(intArray67, 3);
        int int71 = util0.findMinSubArrayLen((int) 'a', intArray67);
        Util util72 = new Util();
        int[] intArray77 = new int[] { 1, (-1), (short) 10, 10 };
        int int79 = util72.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray86 = new int[] { 1, 1, (short) 1 };
        int int87 = util81.findMinSubArrayLen((-1), intArray86);
        int int88 = util80.removeDuplicateElements(intArray86);
        int int90 = util72.findKthLargestViaQuickSort(intArray86, (int) (byte) -1);
        int[] intArray94 = new int[] { 5, 4, 'a' };
        int int95 = util72.removeDuplicateElements(intArray94);
        util72.getNextPermutationNumber(intArray86);
        int int97 = util72.threeSumClosest(intArray86, int90);
        util0.getNextPermutationNumber(intArray86);
        java.lang.Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util0.threeSumClosest(intArray24, int26);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray43 = new int[] { 1, 1, (short) 1 };
        int int44 = util38.findMinSubArrayLen((-1), intArray43);
        int int45 = util37.removeDuplicateElements(intArray43);
        int int47 = util29.findKthLargestViaQuickSort(intArray43, (int) (byte) -1);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util29.threeSumClosest(intArray53, 3);
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util58.getNextPermutationNumber(intArray63);
        int int66 = util29.removeDuplicateElements(intArray63);
        Util util67 = new Util();
        int[] intArray72 = new int[] { 1, (-1), (short) 10, 10 };
        int int74 = util67.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray80 = new int[] { 1, (-1), (short) 10, 10 };
        int int82 = util75.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util67.removeDuplicateElements(intArray80);
        int int84 = util29.removeDuplicateElements(intArray80);
        int int85 = util0.findMinSubArrayLen((int) (short) 10, intArray80);
        java.lang.Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, 1, (short) 1 };
        int int6 = util0.findMinSubArrayLen((-1), intArray5);
        util0.getNextPermutationNumber(intArray5);
        int[] intArray8 = null;
        int int9 = util0.removeDuplicateElements(intArray8);
        int int11 = util0.findMinSubArrayLen(1, intArray5);
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, (-1), (short) 10, 10 };
        int int19 = util12.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, (-1), (short) 10, 10 };
        int int28 = util21.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        int int29 = util12.findMinSubArrayLen((int) '#', intArray26);
        util12.getNextPermutationNumber(intArray17);
        Util util32 = new Util();
        int[] intArray37 = new int[] { 1, (-1), (short) 10, 10 };
        int int39 = util32.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int49 = util32.findMinSubArrayLen((int) '#', intArray46);
        util32.getNextPermutationNumber(intArray37);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray57 = new int[] { 1, 1, (short) 1 };
        int int58 = util52.findMinSubArrayLen((-1), intArray57);
        int int59 = util51.removeDuplicateElements(intArray57);
        util32.getNextPermutationNumber(intArray57);
        int int61 = util12.findMinSubArrayLen((int) ' ', intArray57);
        int[] intArray62 = null;
        int int63 = util12.findMinViaIteration(intArray62);
        int int65 = util12.threeSumClosest(intArray17, 7);
        int int67 = util0.findKthLargestViaQuickSort(intArray17, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray7 = new int[] { 1, 1, (short) 1 };
        int int8 = util2.findMinSubArrayLen((-1), intArray7);
        int int9 = util1.removeDuplicateElements(intArray7);
        Util util11 = new Util();
        Util util12 = new Util();
        int[] intArray17 = new int[] { 1, 1, (short) 1 };
        int int18 = util12.findMinSubArrayLen((-1), intArray17);
        util11.getNextPermutationNumber(intArray17);
        int int20 = util1.findMinSubArrayLen(3, intArray17);
        int int21 = util0.findMinViaIteration(intArray17);
        Util util22 = new Util();
        int[] intArray27 = new int[] { 1, (-1), (short) 10, 10 };
        int int29 = util22.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, 1, (short) 1 };
        int int37 = util31.findMinSubArrayLen((-1), intArray36);
        int int38 = util30.removeDuplicateElements(intArray36);
        int int40 = util22.findKthLargestViaQuickSort(intArray36, (int) (byte) -1);
        int[] intArray44 = new int[] { 5, 4, 'a' };
        int int45 = util22.removeDuplicateElements(intArray44);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, 1, (short) 1 };
        int int54 = util48.findMinSubArrayLen((-1), intArray53);
        util47.getNextPermutationNumber(intArray53);
        Util util56 = new Util();
        int[] intArray61 = new int[] { 1, (-1), (short) 10, 10 };
        int int63 = util56.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray70 = new int[] { 1, (-1), (short) 10, 10 };
        int int72 = util65.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util56.findMinSubArrayLen((int) '#', intArray70);
        util56.getNextPermutationNumber(intArray61);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray81 = new int[] { 1, 1, (short) 1 };
        int int82 = util76.findMinSubArrayLen((-1), intArray81);
        int int83 = util75.removeDuplicateElements(intArray81);
        util56.getNextPermutationNumber(intArray81);
        int int85 = util47.removeDuplicateElements(intArray81);
        int int86 = util22.findMinSubArrayLen((int) 'a', intArray81);
        util0.getNextPermutationNumber(intArray81);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        int[] intArray13 = new int[] { 1, (-1), (short) 10, 10 };
        int int15 = util8.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        int int16 = util0.removeDuplicateElements(intArray13);
        Util util17 = new Util();
        int[] intArray22 = new int[] { 1, (-1), (short) 10, 10 };
        int int24 = util17.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray31 = new int[] { 1, (-1), (short) 10, 10 };
        int int33 = util26.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int int34 = util17.findMinSubArrayLen((int) '#', intArray31);
        util17.getNextPermutationNumber(intArray22);
        int int36 = util0.findMinViaIteration(intArray22);
        int int37 = util0.removeDuplicateElements(intArray22);
        int int39 = util0.findKthLargestViaQuickSort(intArray31, (int) '#');
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, (-1), (short) 10, 10 };
        int int47 = util40.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, (-1), (short) 10, 10 };
        int int56 = util49.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util40.findMinSubArrayLen((int) '#', intArray54);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray64 = new int[] { 1, 1, (short) 1 };
        int int65 = util59.findMinSubArrayLen((-1), intArray64);
        int int66 = util58.removeDuplicateElements(intArray64);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int77 = util58.findMinSubArrayLen(3, intArray74);
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, (-1), (short) 10, 10 };
        int int85 = util78.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray91 = new int[] { 1, (-1), (short) 10, 10 };
        int int93 = util86.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util78.removeDuplicateElements(intArray91);
        int int96 = util58.threeSumClosest(intArray91, (int) (short) 1);
        int int97 = util40.removeDuplicateElements(intArray91);
        util0.getNextPermutationNumber(intArray91);
        util0.getNextPermutationNumber(intArray64);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, 1, (short) 1 };
        int int16 = util10.findMinSubArrayLen((-1), intArray15);
        util9.getNextPermutationNumber(intArray15);
        int int19 = util0.findKthLargestViaQuickSort(intArray15, (int) '#');
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray26 = new int[] { 1, 1, (short) 1 };
        int int27 = util21.findMinSubArrayLen((-1), intArray26);
        util20.getNextPermutationNumber(intArray26);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray35 = new int[] { 1, 1, (short) 1 };
        int int36 = util30.findMinSubArrayLen((-1), intArray35);
        util29.getNextPermutationNumber(intArray35);
        int int39 = util20.findKthLargestViaQuickSort(intArray35, (int) '#');
        int int40 = util0.removeDuplicateElements(intArray35);
        int int41 = util0.findMinViaIteration(intArray35);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        util0.getNextPermutationNumber(intArray6);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray23 = new int[] { 1, (-1), (short) 10, 10 };
        int int25 = util18.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util9.findMinSubArrayLen((int) '#', intArray23);
        util9.getNextPermutationNumber(intArray14);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int36 = util28.removeDuplicateElements(intArray34);
        util9.getNextPermutationNumber(intArray34);
        int int38 = util0.removeDuplicateElements(intArray34);
        int int40 = util0.findMinSubArrayLen(4, intArray23);
        java.lang.Class<?> wildcardClass41 = intArray23.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, (-1), (short) 10, 10 };
        int int16 = util9.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int int17 = util0.findMinSubArrayLen((int) '#', intArray14);
        util0.getNextPermutationNumber(intArray5);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        util0.getNextPermutationNumber(intArray25);
        int int30 = util0.findMinSubArrayLen(5, intArray25);
        Util util31 = new Util();
        int[] intArray36 = new int[] { 1, (-1), (short) 10, 10 };
        int int38 = util31.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray44 = new int[] { 1, (-1), (short) 10, 10 };
        int int46 = util39.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util31.removeDuplicateElements(intArray44);
        Util util48 = new Util();
        int[] intArray53 = new int[] { 1, (-1), (short) 10, 10 };
        int int55 = util48.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray62 = new int[] { 1, (-1), (short) 10, 10 };
        int int64 = util57.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util48.findMinSubArrayLen((int) '#', intArray62);
        util48.getNextPermutationNumber(intArray53);
        int int67 = util31.findMinViaIteration(intArray53);
        int int68 = util31.removeDuplicateElements(intArray53);
        util0.getNextPermutationNumber(intArray53);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        Util util0 = new Util();
        int[] intArray5 = new int[] { 1, (-1), (short) 10, 10 };
        int int7 = util0.findKthLargestViaQuickSort(intArray5, (int) (byte) 1);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray14 = new int[] { 1, 1, (short) 1 };
        int int15 = util9.findMinSubArrayLen((-1), intArray14);
        int int16 = util8.removeDuplicateElements(intArray14);
        int int18 = util0.findKthLargestViaQuickSort(intArray14, (int) (byte) -1);
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, (-1), (short) 10, 10 };
        int int26 = util19.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util0.threeSumClosest(intArray24, 3);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, 1, (short) 1 };
        int int35 = util29.findMinSubArrayLen((-1), intArray34);
        int int37 = util0.findKthLargestViaQuickSort(intArray34, 3);
        int int39 = util0.findKthLargestViaQuickSort(intArray24, 5);
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray63 = new int[] { 1, 1, (short) 1 };
        int int64 = util58.findMinSubArrayLen((-1), intArray63);
        util57.getNextPermutationNumber(intArray63);
        int int67 = util48.findKthLargestViaQuickSort(intArray63, (int) '#');
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray83 = new int[] { 1, 1, (short) 1 };
        int int84 = util78.findMinSubArrayLen((-1), intArray83);
        util77.getNextPermutationNumber(intArray83);
        int int87 = util68.findKthLargestViaQuickSort(intArray83, (int) '#');
        int int88 = util48.removeDuplicateElements(intArray83);
        int int90 = util47.threeSumClosest(intArray83, (int) '#');
        int int91 = util40.findMinViaIteration(intArray83);
        int int92 = util40.threeSumClosest(intArray74, int87);
        int int93 = util0.findMinViaIteration(intArray74);
        java.lang.Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        int int9 = util0.findMinViaIteration(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        Util util19 = new Util();
        int[] intArray24 = new int[] { 1, 1, (short) 1 };
        int int25 = util19.findMinSubArrayLen((-1), intArray24);
        int int26 = util18.removeDuplicateElements(intArray24);
        int int28 = util10.findKthLargestViaQuickSort(intArray24, (int) (byte) -1);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util10.threeSumClosest(intArray34, 3);
        util0.getNextPermutationNumber(intArray34);
        util0.getNextPermutationNumber(intArray15);
        Util util41 = new Util();
        int[] intArray46 = new int[] { 1, (-1), (short) 10, 10 };
        int int48 = util41.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        Util util50 = new Util();
        int[] intArray55 = new int[] { 1, 1, (short) 1 };
        int int56 = util50.findMinSubArrayLen((-1), intArray55);
        int int57 = util49.removeDuplicateElements(intArray55);
        int int59 = util41.findKthLargestViaQuickSort(intArray55, (int) (byte) -1);
        int[] intArray63 = new int[] { 5, 4, 'a' };
        int int64 = util41.removeDuplicateElements(intArray63);
        util41.getNextPermutationNumber(intArray55);
        int int66 = util41.threeSumClosest(intArray55, int59);
        util0.getNextPermutationNumber(intArray55);
        int int69 = util0.findKthLargestViaQuickSort(intArray55, 2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[5, 4, 97]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray6 = new int[] { 1, 1, (short) 1 };
        int int7 = util1.findMinSubArrayLen((-1), intArray6);
        int int8 = util0.removeDuplicateElements(intArray6);
        Util util10 = new Util();
        int[] intArray15 = new int[] { 1, (-1), (short) 10, 10 };
        int int17 = util10.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        int int18 = util0.findMinSubArrayLen((int) (byte) -1, intArray15);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray25 = new int[] { 1, 1, (short) 1 };
        int int26 = util20.findMinSubArrayLen((-1), intArray25);
        int int27 = util19.removeDuplicateElements(intArray25);
        Util util29 = new Util();
        int[] intArray34 = new int[] { 1, (-1), (short) 10, 10 };
        int int36 = util29.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util19.findMinSubArrayLen((int) (byte) -1, intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray45 = new int[] { 1, 1, (short) 1 };
        int int46 = util40.findMinSubArrayLen((-1), intArray45);
        util39.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray54 = new int[] { 1, 1, (short) 1 };
        int int55 = util49.findMinSubArrayLen((-1), intArray54);
        util48.getNextPermutationNumber(intArray54);
        int int58 = util39.findKthLargestViaQuickSort(intArray54, (int) '#');
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray65 = new int[] { 1, 1, (short) 1 };
        int int66 = util60.findMinSubArrayLen((-1), intArray65);
        util59.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray74 = new int[] { 1, 1, (short) 1 };
        int int75 = util69.findMinSubArrayLen((-1), intArray74);
        util68.getNextPermutationNumber(intArray74);
        int int78 = util59.findKthLargestViaQuickSort(intArray74, (int) '#');
        int int79 = util39.removeDuplicateElements(intArray74);
        int int81 = util38.threeSumClosest(intArray74, (int) '#');
        util19.getNextPermutationNumber(intArray74);
        int int84 = util0.findKthLargestViaQuickSort(intArray74, (int) ' ');
        int int86 = util0.threeSumClosest(intArray25, (int) (short) 100);
        int[] intArray87 = null;
        int int89 = util0.threeSumClosest(intArray87, 3);
        int int90 = util0.removeDuplicateElements(intArray45);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }
}

